;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun drf-graph-width () 500)
(defun drf-graph-height () 180)
(defun drf-graph-descr-width () 56)
(defun drf-graph-mag-step () 0.2)
(defun drf-graph-mag-max () 20)
(defun drf-graph-avg-int-max () 300)
(defun drf-graph-max-spin-width () (if (iup-gtk3) 80 55))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet drf (vid fps)
        (deflocal drf-info pix q butbox vbox dlg)

        (set drf-info (assoc))
        (set <_kv "drf-info"> drf-info)
        (set <drf-info "vid"> vid)
        (set <drf-info "fps"> fps)
        (set pix (pix-create (drf-graph-width) (drf-graph-height)))
        (set <drf-info "pix"> pix)
        (set <drf-info "profiles"> (cfg-get "profiles"))
        (set <drf-info "mag"> 1)

        (set q (queue))

        (set vbox (iup-vbox
                        (drf-setup-img1 drf-info q vid pix)
                        (drf-setup-slide drf-info q)
                        (drf-setup-img2 drf-info q vid pix)
                        (drf-setup-search drf-info q vid)
                        (drf-setup-goto drf-info q vid)
                        (drf-setup-last-line drf-info q) ))
        (iup-set-str-attribute vbox "MARGIN" "4x4")
        (iup-set-int vbox "GAP" 0)

        (set dlg (iup-dialog vbox))
        (iup-set-dlg-parent <_kv "win"> dlg)
        (iup-set-str-attribute dlg "TITLE" $"DRF graph")
        (iup-set-bool dlg "DIALOGFRAME" true)
        (iup-set-attribute-handle dlg "DEFAULTESC" <drf-info "close-button">)
        (iup-set-callback dlg "K_ANY" (netptr drf-kb-cb))

        (drf-goto 0)

        (iup-popup dlg (cmacro IUP_CENTERPARENT) (cmacro IUP_CENTERPARENT))

        (sound-pop)
        (close dlg pix)
        (close <drf-info "img1a"> <drf-info "img1b">
               <drf-info "img2a"> <drf-info "img2b"> )
        (iup-close-queue q)
        (assoc-clr _kv "drf-info") )

(defun drf-setup-img1 (drf-info q vid pix) net drf-setup-img1)
(defnet drf-setup-img1 (drf-info q vid pix @wid)
        (deflocal p img lab1a lab1b)

        (set p (pix-create (drf-graph-descr-width) (drf-graph-height)))
        (if (= (vid-bitstream-type vid) 3)
        then    (drf-pix-draw-value p "q=10" (linear 10 0 45 0 1))
                (drf-pix-draw-value p "q=20" (linear 20 0 45 0 1))
                (drf-pix-draw-value p "q=40" (linear 40 0 45 0 1))
        else    (drf-pix-draw-value p "q=4"  (linear  4 0 18 0 1))
                (drf-pix-draw-value p "q=8"  (linear  8 0 18 0 1))
                (drf-pix-draw-value p "q=16" (linear 16 0 18 0 1)) )
        (pix-transparent p (pix-color 0xff 0xff 0xff))

        (set lab1a (iup-label))
        (set <drf-info "lab1a"> lab1a)
        (set img (iup-image-rgba p))
        (close p)
        (set <drf-info "img1a"> img)
        (iup-set-attribute-handle lab1a "IMAGE" img)

        (set lab1b (iup-label))
        (set <drf-info "lab1b"> lab1b)
        (set img (iup-image-rgba pix))
        (set <drf-info "img1b"> img)
        (iup-set-attribute-handle lab1b "IMAGE" img)

        (set @wid (iup-hbox (iup-fill) lab1a lab1b))
        (iup-set-int @wid "GAP" 4)
        (iup-set-int @wid "MARGIN" 0) )

(defun drf-setup-slide (drf-info q) net drf-setup-slide)
(defnet drf-setup-slide (drf-info q @wid)
        (deflocal label slide)

        (set label (iup-label "000,000,000\n00:00:00"))
        (set <drf-info "time-label"> label)
    ;    (iup-set-str-attribute label "ALIGNMENT" "ARIGHT:ACENTER")

        (set slide (iup-val))
        (set <drf-info "slide"> slide)
        (iup-set-str-attribute slide "EXPAND" "HORIZONTAL")
        (iup-set-callback slide "VALUECHANGED_CB" (netptr drf-slide-changed-cb))

        (set @wid (iup-hbox label slide))
        (iup-set-str-attribute @wid "ALIGNMENT" "ACENTER")
        (iup-set-int @wid "GAP" 20)
        (iup-set-int @wid "MARGIN" 0) )

(defun drf-setup-img2 (drf-info q vid pix) net drf-setup-img2)
(defnet drf-setup-img2 (drf-info q vid pix @wid)
        (deflocal p img lab2a lab2b)

        (drf-pix-size vid 1 p)

        (set lab2a (iup-label))
        (set <drf-info "lab2a"> lab2a)
        (set img (iup-image-rgba p))
        (close p)
        (set <drf-info "img2a"> img)
        (iup-set-attribute-handle lab2a "IMAGE" img)

        (set lab2b (iup-label))
        (set <drf-info "lab2b"> lab2b)
        (iup-set-callback lab2b "BUTTON_CB" (netptr drf-mag-cb))
        (set img (iup-image-rgba pix))
        (set <drf-info "img2b"> img)
        (iup-set-attribute-handle lab2b "IMAGE" img)

        (set @wid (iup-hbox (iup-fill) lab2a lab2b))
        (iup-set-int @wid "GAP" 4)
        (iup-set-int @wid "MARGIN" 0) )

(defun drf-setup-search (drf-info q vid) net drf-setup-search)
(defnet drf-setup-search (drf-info q vid @wid)
        (deflocal list hbox sb-drf-min sb-drf-max sb-size-min sb-size-max i)

        (set list (iup-list))
        (set <drf-info "cb-type"> list)
        (iup-set-bool list "DROPDOWN" true)
        (iup-set-str-attribute list 1 $"Any type")
        (for i in (if (= (vid-bitstream-type vid) 3) (slice-type-list) (vop-type-list)) do
                (iup-set-str-attribute list (+ (for-pos) 2) i) )
        (iup-set-int list "VALUE" 1)

        (set i (if (= (vid-bitstream-type vid) 3) 51 31))
        (set sb-drf-min (iup-text-spin 0 i 0))
        (set sb-drf-max (iup-text-spin 0 i i))
        (set <drf-info "sb-drf-min"> sb-drf-min)
        (set <drf-info "sb-drf-max"> sb-drf-max)
        (iup-set-int sb-drf-min "MAXSIZE" (drf-graph-max-spin-width))
        (iup-set-int sb-drf-max "MAXSIZE" (drf-graph-max-spin-width))

        (set i (vid-max-frame-size vid))
        (set sb-size-min (iup-text-spin 0 i 0))
        (set sb-size-max (iup-text-spin 0 i i))
        (set <drf-info "sb-size-min"> sb-size-min)
        (set <drf-info "sb-size-max"> sb-size-max)

        (set hbox (iup-hbox
                (iup-frame-with-margin "DRF range"
                        (iup-hbox
                                sb-drf-min
                                sb-drf-max ))
                (iup-frame-with-margin $"Frame size range"
                        (iup-hbox
                                sb-size-min
                                sb-size-max ))
                (iup-frame-with-margin $"Frame type" list)
                (iup-frame-with-margin $"Prev/Next"
                        (iup-hbox
                                (iup-button-icon undef (netptr drf-prev-cb) (pix-load-static "16x16/go-previous-7.png") q)
                                (iup-button-icon undef (netptr drf-next-cb) (pix-load-static "16x16/go-next-7.png") q) ))))

        (set @wid (iup-frame-with-margin $"Search" hbox)) )

(defun drf-setup-goto (drf-info q vid) net drf-setup-goto)
(defnet drf-setup-goto (drf-info q vid @wid)
        (deflocal goto list1 list2 avg-int profile i)

        (set i (iup-text-spin 0 (- (length vid) 1) 0))
        (set <drf-info "sb-goto"> i)

        (set goto (iup-hbox
                i
                (iup-button-icon undef (netptr drf-goto-cb) (pix-load-static "16x16/go-jump-4.png") q) ))

        (set list1 (iup-list))
        (set <drf-info "cb-select-graph"> list1)
        (iup-set-bool list1 "DROPDOWN" true)
        (iup-set-str-attribute list1 1 $"Frame size")
        (iup-set-str-attribute list1 2 $"VBV buffer")
        (iup-set-int list1 "VALUE" 1)
        (iup-set-callback list1 "ACTION" (netptr drf-select-graph-changed-cb))

        (set list2 (iup-list))
        (set <drf-info "cb-profile"> list2)
        (iup-set-bool list2 "DROPDOWN" true)
        (for i in <drf-info "profiles"> do
                (iup-set-str-attribute list2 (+ (for-pos) 1) <i 0>) )
        (iup-set-int list2 "VALUE" (+ (cfg-get-or-df-num "profile") 1))
        (iup-set-callback list2 "ACTION" (netptr drf-generic-changed-cb))

        (set avg-int (cfg-setup-framed-spin "Avg int" 0 (drf-graph-avg-int-max) 0 drf-info "sb-avg-int"))
        (iup-set-int <drf-info "sb-avg-int"> "MAXSIZE" (drf-graph-max-spin-width))

        (set profile (iup-frame-with-margin $"Profile" list2))

        (set <drf-info "fr-avg-int"> avg-int)
        (set <drf-info "fr-profile"> profile)

        (set @wid (iup-hbox
                (iup-frame-with-margin "Goto" goto)
                (iup-frame-with-margin $"Bottom graph" list1)
                avg-int
                (iup-fill)
                profile ))

        (iup-hide profile)

        (iup-set-callback <drf-info "sb-avg-int"> "VALUECHANGED_CB" (netptr drf-generic-changed-cb)) )

(defun drf-setup-last-line (drf-info q) net drf-setup-last-line)
(defnet drf-setup-last-line (drf-info q @wid)
        (deflocal label button)

        (set label (iup-label ""))
        (set <drf-info "status-label"> label)
        (iup-set-str-attribute label "EXPAND" "HORIZONTAL")

        (set button (iup-button-icon-ok-low $"Close" undef q))
        (set <drf-info "close-button"> button)

        (set @wid (iup-hbox label button)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet drf-kb-cb (dlg c)
        (= c (cmacro K_CR))
        (= (iup-get-focus) <_kv "drf-info" "sb-goto">)
        (drf-goto-cb undef)
        (fail) )

(defnet drf-goto-cb (self)
        (deflocal drf-info frameno)

        (set drf-info <_kv "drf-info">)
        (set frameno (iup-get-int <drf-info "sb-goto"> "SPINVALUE"))
        (iup-set-double <drf-info "slide"> "VALUE" (linear frameno 0 (- (length <drf-info "vid">) 1) 0 1))
        (drf-goto frameno) )

(defnet drf-slide-changed-cb (self)
        (drf-goto (rint (linear (iup-get-double self "VALUE") 0 1 0 (- (length <_kv "drf-info" "vid">) 1)))) )

(defnet drf-goto (frameno)
        (opt (drf-goto-low frameno)) )

(defnet drf-goto-low (frameno)
        (deflocal drf-info vid pix mag fps img a)

        (set drf-info <_kv "drf-info">)
        (set vid <drf-info "vid">)
        (set pix <drf-info "pix">)
        (set mag <drf-info "mag">)
        (set fps <drf-info "fps">)

        (if (= frameno undef)
        then    (set frameno <drf-info "frameno">)
        else    (set <drf-info "frameno"> frameno) )

        (pix-avn-graph-qscale vid pix frameno)
        (set img (iup-image-rgba pix))
        (iup-set-attribute-handle <drf-info "lab1b"> "IMAGE" img)
        (close <drf-info "img1b">)
        (set <drf-info "img1b"> img)

        (if (= (iup-get-int <drf-info "cb-select-graph"> "VALUE") 1)
        then    (iup-hide <drf-info "fr-profile">)
                (iup-show <drf-info "fr-avg-int">)
                (pix-avn-graph-size vid pix frameno mag (iup-get-int <drf-info "sb-avg-int"> "SPINVALUE"))
        else    (iup-hide <drf-info "fr-avg-int">)
                (iup-show <drf-info "fr-profile">)
                (set a <drf-info "profiles" (- (iup-get-int <drf-info "cb-profile"> "VALUE") 1)>)
                (pix-avn-graph-vbvfill vid pix frameno  <a 4> <a 5> <a 6> fps) )

        (set img (iup-image-rgba pix))
        (iup-set-attribute-handle <drf-info "lab2b"> "IMAGE" img)
        (close <drf-info "img2b">)
        (set <drf-info "img2b"> img)

        (iup-set-str-attribute <drf-info "time-label"> "TITLE" (+
                (format-num frameno) nl
                (date-s2hhmmss (floor (/ frameno fps))) ))

        (set a (vid-cnt-type-frame vid frameno))
        (iup-set-str-attribute <drf-info "status-label"> "TITLE" (+
                "Type: "
                (if (> a 4) "drop" <(if (= (vid-bitstream-type vid) 3)
                                (slice-type-short)
                                (vop-type-short) ) a>)
                " - q: " (vid-cnt-qscale-frame vid frameno)
                " - size: " (vid-cnt-size-frame vid frameno)
                (if (> mag 1) (+ " - mag: " mag) "") )))

(defnet drf-prev-cb (self)
        (drf-search false) )

(defnet drf-next-cb (self)
        (drf-search true) )

(defnet drf-search (forward)
        (deflocal drf-info vid frameno size-min size-max avg-int drf-min drf-max type)

        (set drf-info <_kv "drf-info">)
        (set vid <drf-info "vid">)
        (set frameno <drf-info "frameno">)
        (set size-min (iup-get-int <drf-info "sb-size-min"> "SPINVALUE"))
        (set size-max (iup-get-int <drf-info "sb-size-max"> "SPINVALUE"))
        (set avg-int (iup-get-int <drf-info "sb-avg-int"> "SPINVALUE"))
        (set drf-min (iup-get-int <drf-info "sb-drf-min"> "SPINVALUE"))
        (set drf-max (iup-get-int <drf-info "sb-drf-max"> "SPINVALUE"))
        (set type (iup-get-int <drf-info "cb-type"> "VALUE"))
        (set type (if (= type 1) undef (- type 2)))
        (set frameno (if forward
                (vid-search-next vid frameno size-min size-max avg-int drf-min drf-max type)
                (vid-search-prev vid frameno size-min size-max avg-int drf-min drf-max type) ))
        (if (<> frameno undef)
        then    (iup-set-double <drf-info "slide"> "VALUE" (linear frameno 0 (- (length vid) 1) 0 1))
                (drf-goto frameno) ))

(defnet drf-mag-cb (self btn prs x y status)
        (deflocal drf-info mag pix img)

        (opt    (= prs 1)
                (set drf-info <_kv "drf-info">)
                (= (iup-get-int <drf-info "cb-select-graph"> "VALUE") 1)
                (set mag <drf-info "mag">)
                (case btn of
                        49      (seq    (< mag (drf-graph-mag-max))
                                        (inc mag (drf-graph-mag-step)) )
                        50      (seq    (<> mag 1)
                                        (set mag 1) )
                        51      (seq    (> mag 1)
                                        (dec mag (drf-graph-mag-step)) ))
                (set <drf-info "mag"> mag)
                (drf-pix-size <drf-info "vid"> mag pix)
                (set img (iup-image-rgba pix))
                (close pix)
                (iup-set-attribute-handle <drf-info "lab2a"> "IMAGE" img)
                (close <drf-info "img2a">)
                (set <drf-info "img2a"> img)
                (drf-goto-low undef) ))

(defnet drf-select-graph-changed-cb (self)
        (deflocal drf-info pix img)

        (set drf-info <_kv "drf-info">)
        (if (= (iup-get-int <drf-info "cb-select-graph"> "VALUE") 1)
        then    (drf-pix-size <drf-info "vid"> <drf-info "mag"> pix)
        else    (drf-pix-size undef undef pix) )
        (set img (iup-image-rgba pix))
        (close pix)
        (iup-set-attribute-handle <drf-info "lab2a"> "IMAGE" img)
        (close <drf-info "img2a">)
        (set <drf-info "img2a"> img)
        (drf-goto undef) )

(defnet drf-generic-changed-cb (self)
        (drf-goto undef) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet drf-pix-draw-value (pix value pos)
        (set value (pix-text value))
        (opt (pix-draw-pix pix
                (- (width pix) (width value))
                (- (rint (linear pos 0 1 (- (height pix) 1) 0)) 4)
                value ))
        (close value) )

(defnet drf-pix-size (vid mag @pix)
        (deflocal max avg max-pos avg-pos)

        (set @pix (pix-create (drf-graph-descr-width) (drf-graph-height)))
        (if (<> vid undef)
        then    (set max (vid-max-frame-size vid))
                (set avg (vid-avg-frame-size vid))
                (set max-pos (* (/ 10 11) mag))
                (set avg-pos (linear avg 0 max 0 max-pos))
                (drf-pix-draw-value @pix max max-pos)
                (drf-pix-draw-value @pix avg avg-pos) )
        (pix-transparent @pix (pix-color 0xff 0xff 0xff)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

