;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump ()
        (dump-iup-begin)
        (set <_kv "display"> "text")
        (set <_kv "indent-pattern"> (cfg-get-or-df "indent-pattern"))
        (opt (dump0))
        (dump-iup-end)
        (assoc-clr _kv "display")
        (assoc-clr _kv "indent-pattern") )

(defnet dump-file (path)
        (dump-file0 path "file") )

(defnet dump-bbcode (path)
        (deflocal default-info failure)

        (set default-info <_kv "default">)
        (set <_kv "bbcode-color-section"> (color2hex (cfg-get-or-default "bbcode-color-section" default-info)))
        (set <_kv "bbcode-color-field"> (color2hex (cfg-get-or-default "bbcode-color-field" default-info)))
        (set <_kv "bbcode-color-value"> (color2hex (cfg-get-or-default "bbcode-color-value" default-info)))
        (set <_kv "bbcode-bold-section"> (cfg-get-or-default "bbcode-bold-section" default-info))
        (set <_kv "bbcode-underline-section"> (cfg-get-or-default "bbcode-underline-section" default-info))
        (set <_kv "bbcode-bold-field"> (cfg-get-or-default "bbcode-bold-field" default-info))
        (set <_kv "bbcode-underline-field"> (cfg-get-or-default "bbcode-underline-field" default-info))
        (set <_kv "bbcode-bold-value"> (cfg-get-or-default "bbcode-bold-value" default-info))
        (set <_kv "bbcode-underline-value"> (cfg-get-or-default "bbcode-underline-value" default-info))
        (alt    (seq    (dump-file0 path "bbcode")
                        (set failure false) )
                (set failure true) )
        (assoc-clr _kv "bbcode-color-section")
        (assoc-clr _kv "bbcode-color-field")
        (assoc-clr _kv "bbcode-color-value")
        (assoc-clr _kv "bbcode-bold-section")
        (assoc-clr _kv "bbcode-underline-section")
        (assoc-clr _kv "bbcode-bold-field")
        (assoc-clr _kv "bbcode-underline-field")
        (assoc-clr _kv "bbcode-bold-value")
        (assoc-clr _kv "bbcode-underline-value")
        (not failure) )

(defnet dump-html (path)
        (dump-file0 path "html") )

(defnet dump-file0 (path display)
        (deflocal f s)

        (dump-file1 display s)
        (alt    (seq    (= path undef)
                        (opt (info-text s)) )
                (seq    (if (cfg-get-or-df "enabled-utf8bom")
                        then    (if (<> (utf8-length s) (length s))
                                then    (set s (+ (utf8-bom) s)) ))
                        (if (cms-windows)
                        then    (set s (find-and-replace s "\n" "\r\n")) )
                        (set f (fcreate path))
                        (<> f undef)
                        (fprint f s)
                        (close f) )
                (seq    (close f)
                        (opt (remove path))
                        (iup-message-error <_kv "win">
                                (+ "fallita la generazione del file\n"
                                   path ))
                        (fail) )))

(defnet dump-file1 (display @s)
        (set <_kv "display"> display)
        (set <_kv "display-text"> "")
        (set <_kv "indent-pattern"> (cfg-get-or-df "indent-pattern"))
        (if (= display "html")
        then    (assoc-inc _kv "display-text" (+
                        "<html>" nl
                        "<head>" nl
                        "<title>" <_kv "short-path"> "</title>" nl
                        "<meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />" nl
                        "<meta name=\"author\" content=\"AVInaptic\" />" nl
                        "<meta name=\"keywords\" content=\"AVInaptic\" />" nl
                        "<meta name=\"description\" content=\"AVInaptic report\" />" nl
                        "</head>" nl
                        "<body bgcolor=\"#FFEBCD\" text=\"#000000\">" nl
                        "<pre>" nl )))
        (alt    (dump0)
                (seq    (assoc-clr _kv "display")
                        (assoc-clr _kv "display-text")
                        (assoc-clr _kv "indent-pattern")
                        (fail) ))
        (if (= display "html")
        then    (assoc-inc _kv "display-text" (+
                        "</pre>" nl
                        "</body>" nl
                        "</html>" nl )))
        (set @s <_kv "display-text">)
        (assoc-clr _kv "display")
        (assoc-clr _kv "display-text")
        (assoc-clr _kv "indent-pattern") )

(defnet dump0 ()
        (<> <_kv "path"> undef)
        (set <_kv "decimals"> (cfg-get-or-df-num "decimals"))
        (dump-generic-file)
        (dump-magic)
        (dump-id3tag)
        (dump-exif)
        (dump-generic)
        (dump-relevant)
        (dump-log-x264)
        (dump-video)
        (dump-audio)
        (dump-bitstream-vid)
        (dump-profile-compliancy)
        (dump-mkv-attachments)
        (dump-mkv-chapters)
        (dump-sign)
        (assoc-clr _kv "decimals") )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun indent () (indentn 1))
(defun indentn (n) (indentn0 n <_kv "indent-pattern">))
(defun indentn0 (n indent-pattern)
        (tile (* (length indent-pattern) n) indent-pattern) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-section (title)
        (case <_kv "display"> of
                "text"  (if (not (cli)) then (dump-section-text title))
                "file"  (dump-section-file title)
                "bbcode"(dump-section-bbcode title)
                "html"  (dump-section-html title) ))

(defnet dump-section-text (title)
        (dump-iup-append "color-section" (sprint nl title nl nl)) )

(defnet dump-section-file (title)
        (assoc-inc _kv "display-text" (+ ""
                nl "[ " title " ]" nl nl )))

(defnet dump-section-bbcode (title)
        (deflocal underline bold)

        (set underline <_kv "bbcode-underline-section">)
        (set bold <_kv "bbcode-bold-section">)
        (assoc-inc _kv "display-text" (+ ""
               nl
               "[color=" <_kv "bbcode-color-section"> "]"
               (if underline "[u]" "")(if bold "[b]" "")
               "[ " title " ]"
               (if bold "[/b]" "")(if underline "[/u]" "")
               "[/color]" nl )))

(defnet dump-section-html (title)
        (assoc-inc _kv "display-text" (+ ""
                nl
                "<font color=\"#ff0000\">"

                title
                "</font>"
                nl nl )))

(defnet dump-field (field value)
        (deflocal v i)

        (if (not (stringp value))
        then    (set value (sprint value)) )
        (rtrim value)
        (repeat (alt    (seq    (search "\r\n" value i)
                                (set v (rtrim (sub 0 i value)))
                                (set value (ltrim (sub (+ i 2) (maxint) value))) )
                        (seq    (set v value)
                                (set value "") ))
                (case <_kv "display"> of
                        "text"  (if (not (cli)) then (dump-field-text field v))
                        "file"  (dump-field-file field v)
                        "bbcode"(dump-field-bbcode field v)
                        "html"  (dump-field-html field v) )
                until (= value "")
                (set field "") ))

(defnet dump-field-text (field value)
        (deflocal text field-len divider-len value-len v i)

        (set text <_kv "text">)
        (set field-len <_kv "length-field">)
        (set divider-len <_kv "length-divider">)
        (set value-len <_kv "length-value">)
        (if (= (utf8-length field) undef)
        then    (set field $"invalid utf8 string") )
        (set i <_kv "tile-pattern">)
        (if (= i "")
        then    (set i ' ') )
        (set field (str-ellipsize-start field field-len))
        (set field (if <_kv "tile-left">
                (+ (utf8-tile (- field-len (utf8-length field)) i) field)
                (+ field (utf8-tile (- field-len (utf8-length field)) i)) ))
        (dump-iup-append "color-field" (sprint field (tile divider-len)))
        (if (= (utf8-length value) undef)
        then    (set value $"invalid utf8 string") )
        (repeat (if (<= (utf8-length value) value-len)
                then    (dump-iup-append "color-value" (sprint value nl))
                        (set value "")
                else    (set i value-len)
                        (repeat (set v (sub 0 i value))
                                until (<> (utf8-length v) undef)
                                (set i (+ i 1)) )
                        (alt    (seq    (search " " v i (maxint))
                                        (set v (sub (+ i 1) (maxint) v))
                                        (not (search "," v))
                                        (not (search "." v)) )
                                (seq    (search "," v i (maxint))
                                        (set v (sub (+ i 1) (maxint) v))
                                        (not (search "." v)) )
                                (search "." v i (maxint))
                                (set i (- i 1)) )
                        (dump-iup-append "color-value"
                                (sprint (rtrim (sub 0 (+ i 1) value)) nl
                                        (tile (+ field-len divider-len)) ))
                        (set value (ltrim (sub (+ i 1) (maxint) value))) )
                until (= value "") ))

(defnet dump-field-file (field value)
        (assoc-inc _kv "display-text" (+
                (if (= field "") "" (+ field ": "))
                value nl )))

(defnet dump-field-bbcode (field value)
        (deflocal underline-f bold-f underline-v bold-v)

        (set underline-f <_kv "bbcode-underline-field">)
        (set bold-f <_kv "bbcode-bold-field">)
        (set underline-v <_kv "bbcode-underline-value">)
        (set bold-v <_kv "bbcode-bold-value">)
        (assoc-inc _kv "display-text" (+
               (if (= field "") "" (+
               "[color=" <_kv "bbcode-color-field"> "]"
               (if underline-f "[u]" "")(if bold-f "[b]" "")
               field
               (if bold-f "[/b]" "")(if underline-f "[/u]" "")
               "[/color]: " ))
               (if (= value "") "" (+
               "[color=" <_kv "bbcode-color-value"> "]"
               (if underline-v "[u]" "")(if bold-v "[b]" "")
               value
               (if bold-v "[/b]" "")(if underline-v "[/u]" "")
               "[/color]" )) nl )))

(defnet dump-field-html (field value)
        (assoc-inc _kv "display-text" (+
                (if (= field "") "" (+
                "<font color=\"#0000ff\">"
                field ": "
                "</font>" ))
                (if (= value "") "" (+
                "<font color=\"#000000\">"
                value
                "</font>" ))
                nl )))

(defnet dump-sign ()
        (case <_kv "display"> of
                "text"  (if (not (cli)) then (dump-sign-text))
                "file"  (dump-sign-file)
                "bbcode"(dump-sign-bbcode)
                "html"  (dump-sign-html) ))

(defnet dump-sign-text ()
        (dump-iup-append "inverse-background"
                (sprint nl $"This report was created by" " AVInaptic (" (date->version (compile-time))
                        $") on " (format-date <_kv "time">) )))

(defnet dump-sign-file ()
        (assoc-inc _kv "display-text" (+ ""
                nl $"This report was created by" " AVInaptic (" (date->version (compile-time))
                   $") on " (format-date <_kv "time">) nl )))

(defnet dump-sign-bbcode ()
        (assoc-inc _kv "display-text" (+ ""
                nl $"This report was created by" " [b][url=" (url-home-page) "]AVInaptic[/url][/b] (" (date->version (compile-time))
                   $") on " (format-date <_kv "time">) nl )))

(defnet dump-sign-html ()
        (assoc-inc _kv "display-text" (+ ""
                nl $"This report was created by" " <b><a href=\"" (url-home-page) "\">AVInaptic</a></b> (" (date->version (compile-time))
                   $") on " (format-date <_kv "time">) nl )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-nl ()
        (deflocal i)

        (set i <_kv "tile-pattern">)
        (set <_kv "tile-pattern"> "")
        (dump-field "" "")
        (set <_kv "tile-pattern"> i) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-duration (field s)
        (if (rationalp s)
        then    (dump-field field
                        (+ (date-s2hhmmss s) " (" (approx s <_kv "decimals">) " s)") )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-bitrate (field b) (dump-bitrate-basic field b undef))
(defnet dump-bitrate-basic (field b post)
        (if (rationalp b)
        then    (dump-field field
                        (+ "" (approx b <_kv "decimals">) " kbps"
                           (if (and (stringp post) (<> post ""))
                                (+ " " post) "" )))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-boolean (field v)
        (if (booleanp v)
        then    (dump-field field (if v $"Yes" "No")) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-bytes (field v)
        (if (and (integerp v) (>= v 0))
        then    (dump-field field
                        (+ (format-int v) " bytes"
                           (if (< v 1048576) ""
                                (+ " (" (approx (/ v 1048576) <_kv "decimals">) " MiB)" ))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-frequency (field v)
        (if (and (integerp v) (>= v 0))
        then    (dump-field field (sprint v " Hz")) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-date (field d)
        (if (datep d)
        then    (dump-field field (date-arpa (date-local d))) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-framerate (field fps)
        (if (and (rationalp fps) (> fps 0))
        then    (dump-field field (sprint (approx fps <_kv "decimals">) " fps")) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-resolution (field w h)
        (if (and (integerp w) (integerp h) (> w 0) (> h 0))
        then    (dump-field field (sprint w " x " h)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-bitstream-aud (aud complete show-alignment)
        (deflocal ismp3 i)

        (set i (aud-codec aud))
        (if (<> i undef)
        then    (set ismp3 (= i "MP3"))
                (dump-field $"Bitstream type (bs)"
                        (if ismp3 (+ "MPEG-" (aud-version aud) " Layer "
                                        (tile (aud-layer aud) 'I') )
                        (if (= i "AAC") (+ "AAC " (aud-layer aud)) i) ))
                (set i (utf8-validate (aud-encoder aud)))
                (if (<> i undef)
                then    (dump-field "Encoder (bs)" i) )
                (if complete
                then    (dump-field "Frames (bs)" (format-int (aud-frames aud)))
                        (dump-duration $"Duration (bs)" (aud-duration aud)) )
                (if (and show-alignment (or complete (aud-splitted aud)))
                then    (dump-boolean "Chunk-aligned (bs)" (not (aud-splitted aud))) )
                (if (or complete (not (aud-vbr aud)))
                then    (dump-bitrate-basic "Bitrate (bs)" (aud-bitrate aud) (if (aud-vbr aud) "VBR" "CBR")) )
                (dump-frequency $"Sampling frequency (bs)" (aud-frequency aud))
                (dump-field $"Mode (bs)" (aud-mode aud))
                (if ismp3
                then    (dump-boolean "Padding (bs)" (aud-padding aud)) )
                (if (<> (aud-emphasis aud) undef)
                then    (dump-field "Emphasis (bs)" (aud-emphasis aud)) )
                (if (> (aud-initial-skip aud) 0)
                then    (dump-bytes "Initial skip (bs)" (aud-initial-skip aud)) )
                (if (> (aud-internal-skip aud) 0)
                then    (dump-bytes "Internal skip (bs)" (aud-internal-skip aud)) )
                (if (and complete (> (aud-buf-act aud) 0))
                then    (dump-bytes "Final skip (bs)" (aud-buf-act aud)) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-percent-line (val tot max @l)
        (deflocal default-info c q v)

        (set default-info <_kv "default">)
        (set c (cfg-get-or-default-num "percent-line-length" default-info))
        (set q (rint (linear val 0 (if (cfg-get-or-default "percent-line-normalize" default-info) max tot) 0 c)))
        (set v (rint (* (/ val tot) 100000)))
        (set @l (+ (int->str val (+ (log10 max) 1) ' ')
                   " (" (int->str (div v 1000) 3 ' ') '.' (int->str (% v 1000) 3 '0') " %) "
                   (tile q '#') (tile (- c q)) )))

(defnet dump-get-par (vid far @par)
        (deflocal x y)

        (set @par (vid-par vid 0))
        (if (and (<> (vid-bitstream-type vid) 3)
                 (= @par 15) )
        then    (set @par 255) )
        (case @par of
                255     (set @par (/ (vid-par-w vid 0) (vid-par-h vid 0)))
                2       (set @par (/ 12 11)) ; 4:3 PAL pixel shape
                3       (set @par (/ 10 11)) ; 4:3 NTSC pixel shape
                4       (set @par (/ 16 11)) ; 16:9 PAL pixel shape
                5       (set @par (/ 40 33)) ; 16:9 NTSC pixel shape
                6       (set @par (/ 24 11))
                7       (set @par (/ 20 11))
                8       (set @par (/ 32 11))
                9       (set @par (/ 80 33))
                10      (set @par (/ 18 11))
                11      (set @par (/ 15 11))
                12      (set @par (/ 64 33))
                13      (set @par (/ 160 99))
                14      (set @par (/ 4 3))
                15      (set @par (/ 3 2))
                16      (set @par (/ 2 1))
                default (clr @par) )
        (if (= @par undef)
        then    (set @par 1) ))

(defun dump-max-multiple (n pow2)
        (if (= (% n pow2) 0) pow2 (dump-max-multiple n (div pow2 2))) )

(defun dump-ar (ar)
        (sprint (num ar) ":" (den ar) " = " (approx ar <_kv "decimals">)
                (dump-ar-circa ar (/ 4 3) "4:3")
                (dump-ar-circa ar (/ 16 9) "16:9")
                (dump-ar-circa ar 1.85 "1.85:1")
                (dump-ar-circa ar 2.35 "2.35:1") ))

(defun dump-ar-circa (ar val valp)
        (if (and (<> ar val)
                 (< (/ (abs (- ar val)) val) 0.012) )
                (+ " (~" valp ")")
                "" ))

(defun cnt-qscale-cnt (vid n tosub-a tosub-b)
        (if (= n -1) 0
                (+ (vid-cnt-qscale-cnt vid n tosub-a tosub-b)
                   (cnt-qscale-cnt vid (- n 1) tosub-a tosub-b) )))

(defun cnt-qscale-avg (vid n tosub-a tosub-b)
        (if (= n -1) 0
                (+ (vid-cnt-qscale-avg vid n tosub-a tosub-b)
                   (cnt-qscale-avg vid (- n 1) tosub-a tosub-b) )))

(defun cnt-qscale-var (vid n tosub-a tosub-b)
        (if (= n -1) 0
                (+ (vid-cnt-qscale-var vid n tosub-a tosub-b)
                   (cnt-qscale-var vid (- n 1) tosub-a tosub-b) )))

(defun cnt-qscale-max (vid n tosub-a tosub-b)
        (if (= n -1) -1
                (max (vid-cnt-qscale-max vid n tosub-a tosub-b)
                     (cnt-qscale-max vid (- n 1) tosub-a tosub-b) )))

(defun cnt-qscale (vid qscale n tosub-a tosub-b)
        (if (= n -1) 0
                (+ (vid-cnt-qscale vid qscale n tosub-a tosub-b)
                   (cnt-qscale vid qscale (- n 1) tosub-a tosub-b) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-generic-file ()
        (dump-section $"About file")
        (dump-field $"Name" <_kv "short-path">)
        (dump-date $"Date" <_kv "filetime">)
        (dump-bytes $"Size" <_kv "filesize">)
        (if (and (not <_kv "complete">)
                 (in <_kv "filetype"> [ "avi" "mkv" "mp4" "flv" ]) )
        then    (dump-field $"Note" $"Analysis not complete") )
        (if <_kv "aborted">
        then    (dump-field $"Note" $"Analysis aborted") )
        (if (integerp <_kv "fileinfo" "extra-bytes">)
        then    (dump-field $"Note" (+ $"Ignored extra bytes (" <_kv "fileinfo" "extra-bytes"> ")")) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-magic ()
        (deflocal magic first i)

        (set magic <_kv "magic">)
        (if (and (cfg-get-or-df "enabled-magic")
                 (<> magic undef) )
        then    (dump-section "Magic")
                (set first true)
                (opt*   (search "\\012- " magic i)
                        (dump-magic-single (sub 0 i magic) first)
                        (set first false)
                        (set magic (sub (+ i 6) (maxint) magic)) )
                (dump-magic-single magic first) ))

(defnet dump-magic-single (s first)
        (ltrim s ' ' '\t')
        (rtrim s ' ' '\t')
        (if (and (not (lmatch s "(Lepton ")) (or first (<> s "data")))
        then    (dump-field $"File type" s) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-id3tag ()
        (deflocal tag-list tag val)

        (set tag-list <_kv "id3tag">)
        (if (and (cfg-get-or-df "enabled-id3tag")
                 (<> tag-list undef)
                 (<> tag-list nil) )
        then    (dump-section "ID3 Tags")
                (for tag in tag-list do
                        (set val <tag 2>)
                        (if (= (cdr val) nil)
                        then    (set val (car val)) )
                        (dump-field (utf8-validate <tag 1>) val) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-exif ()
        (deflocal exif)

        (set exif <_kv "exif">)
        (if (and (cfg-get-or-df "enabled-exif")
                 (<> exif undef) )
        then    (dump-section "EXIF")
                ; FIXME
                (skip) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-generic ()
        (deflocal filetype fileinfo)

        (set filetype <_kv "filetype">)
        (set fileinfo <_kv "fileinfo">)
        (if (<> filetype "aud")
        then    (dump-section (if (<> filetype undef) $"Generic infos" "Hex dump"))
                (case filetype of
                        "avi"   (dump-generic-avi fileinfo)
                        "asf"   (dump-generic-asf fileinfo)
                        "mkv"   (dump-generic-mkv fileinfo)
                        "mp4"   (dump-generic-mp4 fileinfo)
                        "flv"   (dump-generic-flv fileinfo)
                        "pix"   (dump-generic-pix fileinfo)
                        default (dump-generic-hex-dump) )))

(defnet dump-generic-avi (fileinfo)
        (deflocal loc-info avi streams i j)

        (set loc-info (car fileinfo))
        (set avi (cdr fileinfo))
        (set streams <loc-info "streams">)
        (dump-duration $"Duration" (/ (avi-video-frames avi) <loc-info "fps1">))
        (dump-field $"Container" (+ "AVI"
                (if <loc-info "odml"> " OpenDML" "")
                (if <loc-info "odml-index"> " indexes" "")
                (if <loc-info "odml-multi"> " multi-chunks" "")
                (if <loc-info "rec-lists"> " rec-lists" "")
                (if <loc-info "dmf-menu"> " DivX Media Format (with menu)" "")
                (if (<> <loc-info "google"> undef) " Google" "") ))
        (dump-boolean $"AVI has index" (avi-has-index avi))
        (dump-field $"Total tracks" (length streams))
        (for i in streams do
                (set j <i 1 "name">)
                (dump-field (+ $"Track nr. " (for-pos))
                                 (+ (avistreamtype2str <i 0>)
                                    (if (= j undef) "" (+ " {" j "}")) )))
        (set i <loc-info "INFO">)
        (for i in (if (= i undef) nil i) do
                (dump-field (car i) (cdr i)) )
        (set i <loc-info "JUNK">)
        (for i in (if (= i undef) nil i) do
                (dump-field "Junk" i) )
        (set i <loc-info "corrupt">)
        (if (<> i undef)
        then    (dump-field $"Incomplete AVI sections" (sprintl i ", ")) ))

(defnet dump-generic-asf (fileinfo)
        (skip) )

(defnet dump-generic-mkv (fileinfo)
        (deflocal i j k)

        (dump-duration $"Duration" <fileinfo "Duration">)
        (dump-field $"Container"
                (+ <fileinfo "DocType">
                   (if <fileinfo "multisegment"> " (multisegment)" "") ))
        (dump-date "Production date" <fileinfo "DateUTC">)
        (dump-field $"Total tracks" (length <fileinfo "tracks-array">))
        (for i in <fileinfo "tracks-array"> do
                (set j <(cdr i) "CodecID">)
                (set k <(cdr i) "Name">)
                (dump-field (+ $"Track nr. " (car i))
                        (+ <(cdr i) "TrackType">
                           (if (= j undef) "" (+ " (" j ")"))
                           (if (= k undef) "" (+ " [" k "]"))
                           " {" <(cdr i) "Language"> "}" )))
        (set i <fileinfo "MuxingApp">)
        (if (stringp i)
        then    (dump-field "Muxing library" i) )
        (set i <fileinfo "WritingApp">)
        (if (stringp i)
        then    (dump-field "Writing application" i) )
        (if (cfg-get-or-df "enabled-debug")
        then    (for i in <fileinfo "unknown-ids"> do
                        (dump-field "[debug] unknown id"
                                (sprint (int->hex <i 0>)
                                " (parent: " (if (= <i 1> undef) "none" (int->hex <i 1>))
                                ", level: " <i 2> ")" )))))

(defnet dump-generic-mp4 (fileinfo)
        (deflocal i j k l m)

        (dump-duration $"Duration" <fileinfo "duration">)
        (set i <fileinfo "major-brand">)
        (if (<> i undef)
        then    (dump-field $"Container" "MP4/MOV")
                (dump-field "Major brand" (+ i " version " <fileinfo "minor-version">))
                (set i <fileinfo "compatible-brands">)
                (if (> (length i) 0)
                then    (dump-field "Compatible brands" (sprintl i ", ")) )
        else    (dump-field $"Container" "Apple QuickTime movie (fast start)") )
        (dump-date $"Creation time" <fileinfo "creation-time">)
        (dump-date $"Modification time" <fileinfo "modification-time">)
        (set i <fileinfo "tracks">)
        (dump-field $"Total tracks" (length i))
        (for i in i do
                (set j <i "track-id">)
                (set k <i "type">)
                (set l <i "codingname">)
                (set m <i "name">)
                (case k of
                        undef   (set k $"unknown type")
                        "vide"  (set k "video")
                        "soun"  (set k "audio") )
                (dump-field (+ $"Track nr. " (if (= j undef) (+ (for-pos) 1) j))
                        (+ k
                           (if (= l undef) "" (+ " (" l ")"))
                           (if (= m undef) "" (+ " [" m "]")) )))
        (if (cfg-get-or-df "enabled-debug")
        then    (for i in <fileinfo "unknown-ids"> do
                        (dump-field "[debug] unknown id"
                                (+ (int->hex <i 0>) " (" (parse-mp4-typestr <i 0>) ")"
                                        (if (= <i 1> undef) "" (+ ", parent=" (int->hex <i 1>) " (" (parse-mp4-typestr <i 1>) ")"))
                                        ", level=" <i 2> )))))

(defnet dump-generic-flv (fileinfo)
        (deflocal v a i)

        (dump-duration $"Duration" <fileinfo "duration">)
        (dump-field $"Container" (+ "FLV version " <fileinfo "version">))
        (set v <fileinfo "video">)
        (set a <fileinfo "audio">)
        (dump-field $"Total tracks" (+ v a))
        (set i 0)
        (if (= v 1)
        then    (dump-field (+ $"Track nr. " i) (+ "video (" <fileinfo "vcodec"> ")"))
                (inc i) )
        (if (= a 1)
        then    (dump-field (+ $"Track nr. " i) (+ "audio (" <fileinfo "acodec"> ")")) )
        (dump-bytes "Byte length" <fileinfo "bytelength">)
        (dump-bitrate "Total datarate" <fileinfo "totaldatarate">)
        (for i in <fileinfo "script"> do
                (set v (cdr i))
                (set i (car i))
                (if (booleanp v)
                then    (dump-boolean i v)
                else    (dump-field i (if (rationalp v) (approx v <_kv "decimals">) v)) )))

(defnet dump-generic-pix (fileinfo)
        (deflocal w h)

        (set w <fileinfo 1>)
        (set h <fileinfo 2>)
        (dump-field $"Image loader" <fileinfo 0>)
        (if (and (rationalp w) (rationalp h) (> w 0) (> h 0))
        then    (dump-field $"Resolution" (sprint (approx w <_kv "decimals">)
                                                  " x " (approx h <_kv "decimals">) )))
        (dump-field "Color" <fileinfo 3>)
        (dump-field $"Luminance" (approx <fileinfo 4> <_kv "decimals">))
        (dump-field $"Contrast" (approx <fileinfo 5> <_kv "decimals">)) )

(defnet dump-generic-hex-dump ()
        (deflocal c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf
                  f size cnt )

        (set f (fopenro <_kv "path">))
        (if (<> f undef)
        then    (set cnt 0)
                (set size (min (length f) (cfg-get-or-df-num "hex-dump-max")))
                (repeat (set c0 (length (freadchar f)))
                        (set c1 (length (freadchar f)))
                        (set c2 (length (freadchar f)))
                        (set c3 (length (freadchar f)))
                        (set c4 (length (freadchar f)))
                        (set c5 (length (freadchar f)))
                        (set c6 (length (freadchar f)))
                        (set c7 (length (freadchar f)))
                        (set c8 (length (freadchar f)))
                        (set c9 (length (freadchar f)))
                        (set ca (length (freadchar f)))
                        (set cb (length (freadchar f)))
                        (set cc (length (freadchar f)))
                        (set cd (length (freadchar f)))
                        (set ce (length (freadchar f)))
                        (set cf (length (freadchar f)))
                        (dump-field (sprint
                                (hexdigit (div cnt 0x10000000))
                                (hexdigit (div cnt 0x1000000))
                                (hexdigit (div cnt 0x100000))
                                (hexdigit (div cnt 0x10000))
                                (hexdigit (div cnt 0x1000))
                                (hexdigit (div cnt 0x100))
                                (hexdigit (div cnt 0x10))
                                (hexdigit cnt) ) (sprint
                                (hexdigit (div c0 0x10)) (hexdigit c0) ' '
                                (hexdigit (div c1 0x10)) (hexdigit c1) ' '
                                (hexdigit (div c2 0x10)) (hexdigit c2) ' '
                                (hexdigit (div c3 0x10)) (hexdigit c3) ' '
                                (hexdigit (div c4 0x10)) (hexdigit c4) ' '
                                (hexdigit (div c5 0x10)) (hexdigit c5) ' '
                                (hexdigit (div c6 0x10)) (hexdigit c6) ' '
                                (hexdigit (div c7 0x10)) (hexdigit c7) ' '
                                ' '
                                (hexdigit (div c8 0x10)) (hexdigit c8) ' '
                                (hexdigit (div c9 0x10)) (hexdigit c9) ' '
                                (hexdigit (div ca 0x10)) (hexdigit ca) ' '
                                (hexdigit (div cb 0x10)) (hexdigit cb) ' '
                                (hexdigit (div cc 0x10)) (hexdigit cc) ' '
                                (hexdigit (div cd 0x10)) (hexdigit cd) ' '
                                (hexdigit (div ce 0x10)) (hexdigit ce) ' '
                                (hexdigit (div cf 0x10)) (hexdigit cf) ' '
                                ' '
                                '|'
                                (dump-printable c0)
                                (dump-printable c1)
                                (dump-printable c2)
                                (dump-printable c3)
                                (dump-printable c4)
                                (dump-printable c5)
                                (dump-printable c6)
                                (dump-printable c7)
                                (dump-printable c8)
                                (dump-printable c9)
                                (dump-printable ca)
                                (dump-printable cb)
                                (dump-printable cc)
                                (dump-printable cd)
                                (dump-printable ce)
                                (dump-printable cf)
                                '|' ))
                        (set cnt (+ cnt 16))
                        until (>= cnt size) )
                (close f) ))

(defun dump-printable (n)
        (if (= n undef) ' ' (if (or (< n 0x20) (>= n 0x7f)) '.' (int->char n))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-relevant ()
        (deflocal w h vid comment bs-type
                  type types tosub-a tosub-b n avg dev wm-dev i j )

        (opt    (set n <_kv "correction">)
                (for i in 1 .. <_kv "video"> do
                        (opt    (info->vid-fps-res-low (for-pos) vid j w h)
                                (set tosub-a <n (for-pos) 1>)
                                (set tosub-b <n (for-pos) 2>) )
                        until (vidp vid) )
                (integerp w)
                (integerp h)
                (set comment (cfg-get-or-df "enabled-comment"))

                (dump-section $"Relevant data")

                (set i (* w h))
                (dump-field $"Resolution"
                        (if comment (+
                                (if (>= i (* 720 384)) $"VERY HIGH"
                                (if (>= i (* 624 336)) $"HIGH"
                                (if (>= i (* 544 288)) $"MEDIUM"
                                (if (>= i (* 480 256)) $"LOW"
                                                       $"VERY LOW" ))))
                                " (" w " x " h ")" ) (sprint w " x " h) ))
                (set i (dump-max-multiple w 32))
                (dump-field $"Width" (+
                        $"multiple of " i (if comment (+ " ("
                                (if (>= i 16) $"GOOD"
                                (if (>= i 2)  $"16 would be better"
                                              $"BAD" ))
                                ")" ) "" )))
                (set i (dump-max-multiple h 32))
                (dump-field $"Height" (+
                        $"multiple of " i (if comment (+ " ("
                                (if (>= i 16) $"GOOD"
                                (if (>= i 2)  $"16 would be better"
                                              $"BAD" ))
                                ")" ) "" )))
                (vidp vid)
                (= <_kv "complete"> true)
                (set bs-type (vid-bitstream-type vid))
                (>= bs-type 1)
                (<= bs-type 3)
                (set types (if (= bs-type 3) 4 3))
                (set n (cnt-qscale-cnt vid types tosub-a tosub-b))
                (> n 0)
                (set avg (/ (cnt-qscale-avg vid types tosub-a tosub-b) n))
                (set dev (sqrt (- (/ (cnt-qscale-var vid types tosub-a tosub-b) n)
                                  (* avg avg) )))
                (set wm-dev 0)
                (for type in 0 .. types do
                        (set j (vid-cnt-qscale-cnt vid type tosub-a tosub-b))
                        (if (> j 0)
                        then    (set i (/ (vid-cnt-qscale-avg vid type tosub-a tosub-b) j))
                                (set wm-dev (+ wm-dev (* j (sqrt (- (/ (vid-cnt-qscale-var vid type tosub-a tosub-b) j) (* i i)))))) ))
                (set wm-dev (/ wm-dev n))
                (if comment
                then    (dump-field $"Average DRF quality" (+
                                (if (= bs-type 3)
                                        (if (< avg 18)    $"VERY HIGH"
                                        (if (< avg 22)    $"HIGH"
                                        (if (< avg 26)    $"MEDIUM"
                                        (if (< avg 32)    $"LOW"
                                                          $"VERY LOW" ))))
                                        (if (< avg 3.2)   $"HIGH"
                                        (if (<= avg 5)    $"MEDIUM"
                                                          $"LOW" )))
                                " (" (approx avg <_kv "decimals">) ")" ))
                else    (dump-field $"Average DRF" (approx avg <_kv "decimals">)) )
                (if comment
                then    (dump-field $"Standard deviation quality" (+
                                (if (= bs-type 3)
                                        (if (< dev 3)     $"HIGH"
                                        (if (< dev 8)     $"MEDIUM"
                                                          $"LOW" ))
                                        (if (< dev 0.8)   $"HIGH"
                                        (if (< dev 1.6)   $"MEDIUM"
                                                          $"LOW" )))
                                " (" (approx dev <_kv "decimals">) ")" ))
                else    (dump-field $"Standard deviation" (approx dev <_kv "decimals">)) )
                (if comment
                then    (dump-field $"Std. dev. weighted mean" (+
                                (if (= bs-type 3)
                                        (if (< wm-dev 3)  $"HIGH"
                                        (if (< wm-dev 8)  $"MEDIUM"
                                                          $"LOW" ))
                                        (if (< wm-dev 0.8)$"HIGH"
                                        (if (< wm-dev 1.6)$"MEDIUM"
                                                          $"LOW" )))
                                " (" (approx wm-dev <_kv "decimals">) ")" ))
                else    (dump-field $"Std. dev. weighted mean" (approx wm-dev <_kv "decimals">)) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-log-x264 ()
        (deflocal a i tot max prc)

        (set a <_kv "log-x264">)
        (if (and (assocp a) (cfg-get-or-df "enabled-x264-log"))
        then    (dump-section "x264 log")

                (set tot 0)
                (for i in a do
                        (inc tot <(cdr i) 0>)
                        (set max (max max <(cdr i) 0>)) )
                (for i in a do
                        (dump-percent-line <(cdr i) 0> tot max prc)
                        (dump-field (+ "frame " (car i)) prc) )

                (set max 0)
                (for i in a do
                        (inc max (* <(cdr i) 0> <(cdr i) 1>))
                        (dump-field (+ "frame " (car i) " avg QP") (approx <(cdr i) 1> <_kv "decimals">)) )
                (dump-field "Avg QP" (approx (/ max tot) <_kv "decimals">)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-video ()
        (deflocal video fileinfo i)

        (set video <_kv "video">)
        (if (> video 0)
        then    (set fileinfo <_kv "fileinfo">)
                (for i in 1 .. video do
                        (dump-section
                                (+ $"Video track"
                                   (if (> video 1) (+ " nr. " i) "") ))
                        (case <_kv "filetype"> of
                                "avi"   (dump-video-avi fileinfo i)
                                "asf"   (dump-video-asf fileinfo i)
                                "mkv"   (dump-video-mkv fileinfo i)
                                "mp4"   (dump-video-mp4 fileinfo i)
                                "flv"   (dump-video-flv fileinfo) ))))

(defnet dump-video-avi (fileinfo track)
        (deflocal loc-info trk-info avi vid w1 w2 h1 h2 fps1 fps2 br i)

        (set loc-info (car fileinfo))
        (set avi (cdr fileinfo))
        (for i in <loc-info "streams"> do
                (if (= <i 0> "vids")
                then    (set track (- track 1)) )
                until (= track 0) )
        (set trk-info <i 1>)
        (set vid <i 2>)

        (set w1 <trk-info "width">)
        (set w2 <loc-info "width">)
        (set h1 <trk-info "height">)
        (set h2 <loc-info "height">)

        (set fps1 (approx <loc-info "fps1"> <_kv "decimals">))
        (set fps2 (approx <loc-info "fps2"> <_kv "decimals">))

        (dump-field "FourCC" (+ <trk-info "handler"> "/" <trk-info "fourcc">))
        (dump-field $"Resolution" (sprint w1 " x " h1
                (if (and (= w1 w2) (= h1 h2)) "" (sprint " (" w2 " x " h2 ")")) ))
        (if (or (<> (width vid) w1) (<> (height vid) h1))
        then    (dump-resolution $"Resolution (bs)" (width vid) (height vid)) )
        (set w2 (/ w1 h1))
        (dump-get-par vid w2 h2)
        (dump-field "Frame aspect ratio" (dump-ar w2))
        (dump-field "Pixel aspect ratio" (dump-ar h2))
        (dump-field "Display aspect ratio" (dump-ar (* w2 h2)))
        (set i (/ <trk-info "vprp-aspect-x">
                  <trk-info "vprp-aspect-y"> ))
        (if (<> i undef)
        then    (dump-field "Vprp aspect ratio" (dump-ar i)) )
        (dump-field "Framerate" (sprint fps1 " fps" (if (<= (abs (- fps1 fps2)) 0.001) "" (sprint " (" fps2 ")"))))
        (dump-field $"Total frames" (format-int (avi-video-frames avi)))
        (set i <loc-info "riff-avi-frames">)
        (if (and (> i 0) (<> i (avi-video-frames avi)))
        then    (dump-field "Frames RIFF AVI" (format-int i)) )
        (if (and (avi-has-index avi) (> (avi-video-streamsize avi) 0))
        then    (set br (/ (* 0.008 (avi-video-streamsize avi) fps1) (avi-video-frames avi)))
                (dump-bytes $"Stream size" (avi-video-streamsize avi))
                (dump-bitrate "Bitrate" br)
                (dump-field "Qf" (approx (/ br 0.001 w1 h1 fps1) <_kv "decimals">))
                (dump-field "Key frames" <loc-info "avi-keyframes">)
                (dump-field "Null frames" <loc-info "avi-nulframes">)
                (dump-field "Min key int" <loc-info "avi-video-min-keyint">)
                (dump-field "Max key int" <loc-info "avi-video-max-keyint">)
                (dump-field "Avg key int" (approx (/ (avi-video-frames avi)
                                                          <loc-info "avi-video-keyframes"> )
                                                       <_kv "decimals"> )))
        (dump-field $"Delay" (sprint (rint (* 1000 <trk-info "delay">)) " ms")) )

(defnet dump-video-asf (fileinfo track)
        ; FIXME
        (skip) )

(defnet dump-video-mkv (fileinfo track)
        (deflocal i j w h dw dh s fps)

        (for i in <fileinfo "tracks-array"> do
                (if (= <(cdr i) "TrackType"> "video")
                then    (inc track -1) )
                until (= track 0) )
        (set track (cdr i))
        (dump-field "Codec ID" <track "CodecID">)
        (set w <track "PixelWidth">)
        (set h <track "PixelHeight">)
        (if (and (<> w undef) (<> h undef))
        then    (dump-resolution $"Resolution" w h)
                (set i <track "PixelCropBottom">)
                (if (> i 0)
                then    (dump-field "Crop bottom" i) )
                (set i <track "PixelCropTop">)
                (if (> i 0)
                then    (dump-field "Crop top" i) )
                (set i <track "PixelCropLeft">)
                (if (> i 0)
                then    (dump-field "Crop left" i) )
                (set i <track "PixelCropRight">)
                (if (> i 0)
                then    (dump-field "Crop right" i) )
                (set dw <track "DisplayWidth">)
                (set dh <track "DisplayHeight">)
                (if (or (<> dw w) (<> dh h))
                then    (dump-field "Display resolution" (sprint dw " x " dh
                                " (" <
                                          [ "pixels" "centimeters" "inches" "display aspect ratio" "unknown" ]  <track "DisplayUnit">> ")" )))
                (dump-field "Frame aspect ratio" (dump-ar (/ w h)))
                (dump-field "Pixel aspect ratio" (dump-ar (/ (* dw h) dh w)))
                (dump-field "Display aspect ratio" (dump-ar (/ dw dh))) )
        (set fps <track "Framerate">)
        (dump-framerate "Framerate" fps)
        (if (cfg-get-or-df "enabled-debug")
        then    (dump-bytes "[debug] codec private" (cdr <track "CodecPrivate">)) )
        (dump-mkv-content-encodings track)
        (if <_kv "complete">
        then    (set i <track "low">)
                (if (arrayp i)
                then    (set s <i 4>)
                        (dump-bytes $"Stream size" s)
                        (if (<> fps undef)
                        then    (set j (/ <i 3> fps))
                                (dump-duration $"Duration (bs)" j)
                                (dump-bitrate "Bitrate (bs)" (/ s j 125))
                                (set j (approx (/ (/ s j 125) 0.001 w h fps) <_kv "decimals">))
                                (if (<> j undef)
                                then    (dump-field "Qf" j) ))
                        (set i <i 0>)
                        (if (vidp i)
                        then    (set dw (width i))
                                (set dh (height i))
                                (if (or (<> dw w) (<> dh h))
                                then    (dump-resolution $"Resolution (bs)" dw dh) )))))

(defnet dump-video-mp4 (fileinfo track)
        (deflocal trckinfo w h dw dh fps br vid i j)

        (for trckinfo in <fileinfo "tracks"> do
                (if (= <trckinfo "type"> "vide")
                then    (inc track -1) )
                until (= track 0) )
        (dump-field "Codec" <trckinfo "codingname">)
        (set w <trckinfo "width">)
        (set h <trckinfo "height">)
        (if (and (<> w undef) (<> h undef))
        then    (dump-resolution $"Resolution" w h)
                (set dw <trckinfo "DisplayWidth">)
                (set dh <trckinfo "DisplayHeight">)
                (if (or (= dw undef) (= dw 0))
                then    (set dw w) )
                (if (or (= dh undef) (= dh 0))
                then    (set dh h) )
                (dump-field "Frame aspect ratio" (dump-ar (/ w h)))
                (dump-field "Pixel aspect ratio" (dump-ar (/ (* dw h) dh w)))
                (dump-field "Display aspect ratio" (dump-ar (/ dw dh))) )
        (set fps <trckinfo "framerate">)
        (dump-framerate "Framerate" fps)
        (set br <trckinfo "bitrate">)
        (dump-bitrate "Bitrate" br)
        (if <_kv "complete">
        then    (set vid <trckinfo "low">)
                (set i (/ (length vid) fps))
                (dump-duration $"Duration (bs)" i)
                (set j (/ <trckinfo "tracksize"> i 125))
                (if (<> j br)
                then    (dump-bitrate "Bitrate (bs)" j) )
                (set j (approx (/ j 0.001 w h fps) <_kv "decimals">))
                (if (<> j undef)
                then    (dump-field "Qf" j) )))

(defnet dump-video-flv (fileinfo)
        (deflocal vid fps w h i j)

        (set vid <fileinfo "vid">)
        (set fps <fileinfo "framerate">)
        (set w <fileinfo "width">)
        (set h <fileinfo "height">)
        (dump-field "Codec" <fileinfo "vcodec">)
        (if (and (<> w undef) (<> h undef))
        then    (dump-resolution $"Resolution" w h)
                (set i (/ w h))
                (dump-get-par vid i j)
                (dump-field "Frame aspect ratio" (dump-ar i))
                (dump-field "Pixel aspect ratio" (dump-ar j))
                (dump-field "Display aspect ratio" (dump-ar (* i j))) )
        (dump-framerate "Framerate" fps)
        (dump-bitrate "Bitrate" <fileinfo "videodatarate">)
        (if <_kv "complete">
        then    (set i (/ (length vid) fps))
                (dump-duration $"Duration (bs)" i)
                (dump-bitrate "Bitrate (bs)" (/ <fileinfo "vid-size"> i 125)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-audio ()
        (deflocal audio fileinfo i)

        (set audio <_kv "audio">)
        (if (> audio 0)
        then    (set fileinfo <_kv "fileinfo">)
                (for i in 1 .. audio do
                        (dump-section
                                (+ $"Audio track"
                                   (if (> audio 1) (+ " nr. " i) "") ))
                        (case <_kv "filetype"> of
                                "aud"   (dump-audio-aud fileinfo)
                                "avi"   (dump-audio-avi fileinfo i)
                                "asf"   (dump-audio-asf fileinfo i)
                                "mkv"   (dump-audio-mkv fileinfo i)
                                "mp4"   (dump-audio-mp4 fileinfo i)
                                "flv"   (dump-audio-flv fileinfo) ))))

(defnet dump-audio-aud (fileinfo)
        (dump-bitstream-aud fileinfo true false) )

(defnet dump-audio-avi (fileinfo track)
        (deflocal trk-info avi aud max-av-diff i)

        (set avi (cdr fileinfo))
        (avi-set-audio-track avi (- track 1))
        (for i in <(car fileinfo) "streams"> do
                (if (= <i 0> "auds")
                then    (set track (- track 1)) )
                until (= track 0) )
        (set trk-info <i 1>)
        (set aud <i 2>)
        (set max-av-diff <i 3>)

        (set i <trk-info "tag">)
        (dump-field "Audio tag" (+ (int->hex i) " (" (audiotag2name i) ")"))
        (dump-field $"Channels" <trk-info "channels">)
        (set i (approx <trk-info "bitrate"> <_kv "decimals">))
        (if (or (= (aud-codec aud) undef)
                (<> (approx (aud-bitrate aud) <_kv "decimals">) i)
                (<> (aud-vbr aud) <trk-info "vbr">) )
        then    (dump-bitrate-basic "Bitrate" i (if <trk-info "vbr"> "VBR" "CBR")) )
        (set i <trk-info "frequency">)
        (if (or (= (aud-codec aud) undef) (<> (aud-frequency aud) i))
        then    (dump-frequency $"Sampling frequency" i) )
        (if (and (avi-has-index avi) (> (avi-audio-streamsize avi) 0))
        then    (dump-field "Chunks" (format-int (avi-audio-chunks avi)))
                (dump-bytes $"Stream size" (avi-audio-streamsize avi)) )

        (if (<> (aud-codec aud) undef)
        then    (dump-bitstream-aud aud <_kv "complete"> true)
                (set i <trk-info "preload">)
                (if (<> i undef)
                then    (dump-field "Preload"
                                (sprint (rint (* 1000 i)) " ms" (if (= i 0) (+
                                        " (" <trk-info "preload-frames"> " video frames)" ) "" ))))
                (if (<> max-av-diff undef)
                then    (dump-field "Max A/V diff" (sprint (rint (* 1000 max-av-diff)) " ms")) ))
        (dump-field $"Delay" (sprint (rint (* 1000 <trk-info "delay">)) " ms")) )

(defnet dump-audio-asf (fileinfo track)
        ; FIXME
        (skip) )

(defnet dump-audio-mkv (fileinfo track)
        (deflocal i j)

        (for i in <fileinfo "tracks-array"> do
                (if (= <(cdr i) "TrackType"> "audio")
                then    (inc track -1) )
                until (= track 0) )
        (set track (cdr i))
        (dump-field "Codec ID" <track "CodecID">)

        (set i <track "SamplingFrequency">)
        (set j <track "OutputSamplingFrequency">)
        (dump-frequency $"Sampling frequency" i)
        (if (<> j i)
        then    (dump-frequency $"Output sampling frequency" j) )
        (dump-field $"Channels" <track "Channels">)

        (set i <track "BitDepth">)
        (if (<> i undef)
        then    (dump-field $"Sample size" (sprint i "-bit")) )
        (if (cfg-get-or-df "enabled-debug")
        then    (dump-bytes "[debug] codec private" (cdr <track "CodecPrivate">)) )
        (dump-mkv-content-encodings track)
        (set j <_kv "complete">)
        (set i <track "low">)
        (if (and j (arrayp i))
        then    (dump-bytes $"Stream size" <i 4>) )
        (dump-bitstream-aud <i 0> j true) )

(defnet dump-audio-mp4 (fileinfo track)
        (deflocal trckinfo)

        (for trckinfo in <fileinfo "tracks"> do
                (if (= <trckinfo "type"> "soun")
                then    (inc track -1) )
                until (= track 0) )
        (dump-field "Codec" <trckinfo "codingname">)
        (dump-bitrate "Bitrate" <trckinfo "bitrate">)

        ; FIXME

        (dump-bitstream-aud <trckinfo "low"> <_kv "complete"> true) )

(defnet dump-audio-flv (fileinfo)
        (deflocal aud i)

        (set aud <fileinfo "aud">)

        (dump-field "Codec" <fileinfo "acodec">)

        (set i <fileinfo "achan">)
        (if (<> i undef)
        then    (dump-field $"Channels" i) )

        (dump-bitrate "Bitrate" <fileinfo "audiodatarate">)

        (set i <fileinfo "abits">)
        (if (= i undef)
        then    (set i <fileinfo "audiosamplesize">) )
        (if (<> i undef)
        then    (dump-field "Sample size" (sprint i "-bit")) )

        (set i <fileinfo "afreq">)
        (if (= i undef)
        then    (set i <fileinfo "audiosamplerate">) )
        (if (<> i (aud-frequency aud))
        then    (dump-frequency $"Sampling frequency" i) )

        (dump-bitstream-aud aud <_kv "complete"> true) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-bitstream-vid ()
        (deflocal video a vid fps i j)

        (set video <_kv "video">)
        (set a <_kv "correction">)
        (for i in 1 .. video do
                (alt    (seq    (info->vid-fps-low (for-pos) vid fps)
                                (set j (vid-bitstream-type vid))
                                (in j [ 1 2 3 ])
                                (dump-section
                                        (+ $"Video bitstream"
                                           (if (> video 1) (+ " nr. " i) "") ))
                                (dump-bitstream-vid0 vid j fps <a (for-pos) 1> <a (for-pos) 2>) )
                        (seq    (= video 1)
                                (set j (x265-user-data <_kv "path">))
                                (stringp j)
                                (dump-section $"Video bitstream")
                                (dump-field $"Bitstream type" "H.265/HEVC")
                                (dump-bitstream-vid-user-data (list j)) )
                        (success) )))

(defnet dump-bitstream-vid0 (vid bs-type fps tosub-a tosub-b)
        (deflocal i j)

        (dump-field $"Bitstream type"
                <[ "MPEG-4 Part 2" "MS-MPEG4" "MPEG-4 Part 10" ] (- bs-type 1)> )

        (if (vid-qpneg vid)
        then    (dump-field $"Warning"
                        $"detected QP < 0" ))

        (if (vid-missing-vol vid)
        then    (dump-field $"Note"
                        $"it seems like the video doesn't start with a keyframe" ))

        (set i (vid-error vid))
        (if (<> i undef)
        then    (dump-field $"Error" i)
                (fail) )

        (dump-bitstream-vid-user-data (vid-userdata vid))

        (if (in bs-type [ 1 2 ])
        then    (dump-bitstream-vid-mpeg4-asp vid)
        else    (dump-bitstream-vid-mpeg4-avc vid) )

        (= <_kv "complete"> true)

        (dump-field $"Total frames" (format-int (length vid)))
        (dump-field "Drop/delay frames" (format-int (vid-cnt-qscale-cnt vid 5 0 0)))
        (dump-field $"Corrupt frames" (format-int (vid-cnt-qscale-cnt vid 6 0 0)))
        (dump-frame-types vid)
        (if (= bs-type 1)
        then    (dump-bframes vid)
                (dump-warp-points vid) )
        (dump-drf vid fps 0 0)
        (if (or (> tosub-a 0) (> tosub-b 0))
        then    (dump-drf vid fps tosub-a tosub-b) ))

(defnet dump-bitstream-vid-user-data (list)
        (deflocal grouped max nodup acc i j)

        (set grouped (cfg-get-or-df "user-data-grouped"))
        (set max <_kv "length-value">)
        (set nodup (assoc))
        (for i in list do
                (set i (utf8-validate (rtrim i '' ' ' '\t' '\r' '\n')))
                (alt    (= i "")
                        (seq    (lmatch i "x264" "x265")
                                (set acc "")
                                (opt*   (search " - " i j)
                                        (dump-bitstream-vid-user-data-put grouped max acc (sub 0 j i) nodup)
                                        (set i (sub (+ j 3) (maxint) i)) )
                                (opt    (lmatch remove i "options: "))
                                (opt*   (search " " i j)
                                        (dump-bitstream-vid-user-data-put grouped max acc (sub 0 j i) nodup)
                                        (set i (sub (+ j 1) (maxint) i)) )
                                (opt    (<> i "")
                                        (dump-bitstream-vid-user-data-put grouped max acc i nodup) )
                                (if (<> acc "")
                                then    (dump-bitstream-vid-user-data-dump acc nodup) ))
                        (seq    (search " - " i)
                                (set acc "")
                                (opt*   (search " - " i j)
                                        (dump-bitstream-vid-user-data-put grouped max acc (sub 0 j i) nodup)
                                        (set i (sub (+ j 3) (maxint) i)) )
                                (opt    (<> i "")
                                        (dump-bitstream-vid-user-data-put grouped max acc i nodup) )
                                (if (<> acc "")
                                then    (dump-bitstream-vid-user-data-dump acc nodup) ))
                        (dump-bitstream-vid-user-data-dump i nodup) )))

(defnet dump-bitstream-vid-user-data-put (grouped max @acc l nodup)
        (if grouped
        then    (if (<= (+ (length @acc) 3 (length l)) max)
                then    (inc @acc (if (= @acc "") "" " | ") l)
                else    (if (<> @acc "")
                        then    (dump-bitstream-vid-user-data-dump @acc nodup) )
                        (set @acc l) )
        else    (dump-bitstream-vid-user-data-dump l nodup) ))

(defnet dump-bitstream-vid-user-data-dump (value nodup)
        (if (= <nodup value> undef)
        then    (set <nodup value> true)
                (dump-field "User data" value) ))

(defnet dump-bitstream-vid-mpeg4-asp (vid)
        (deflocal i j k)

        (set i (vid-packed vid))
        (if (and <_kv "complete"> (= i undef)) then (set i false))
        (if (<> i undef)
        then    (dump-field "Packed bitstream"
                        (if i (+ $"Yes" (if (> (vid-max-bframes vid) 1) " (*)" ""))
                              "No" )))

        (dump-boolean "QPel" (vid-qpel vid))

        (if (= (vid-sprite-enable vid) 2)
        then    (dump-field "GMC" (sprint $"Yes" " (warp points: "
                        (vid-sprite-warping-points vid) ")"
                        (if (>= (vid-sprite-warping-points vid) 3) " (*)" "") ))
        else    (dump-boolean "GMC" false) )

        (set i (vid-tff vid))
        (dump-field $"Interlaced"
                (+ (if (vid-interlaced vid) (+ $"Yes" " (*)") "No")
                   (if (<> i undef) (if i " (top field first)" " (bottom field first)") "") ))

        (set i (vid-par vid))
        (if (= i 15)
        then    (set j (vid-par-w vid))
                (set k (vid-par-h vid))
                (dump-field "Aspect ratio" (sprint (ar-desc-mpeg4-asp i) " (" j ":" k " = " (approx (/ j k) <_kv "decimals">) ")"))
        else    (dump-field "Aspect ratio" (ar-desc-mpeg4-asp i)) )

        (if (vid-mpeg-quant vid)
        then    (set i (vid-quant-matrix vid 0 0))
                (set j (vid-quant-matrix vid 1 0))
                (dump-field "Quant type" (sprint "MPEG" (if (or (<> i undef) (<> j undef)) " custom" "")))
                (if (<> i undef)
                then    (dump-field "Custom intra quant matrix" "")
                        (dump-matrix vid 0 0 8) )
                (if (<> j undef)
                then    (dump-field "Custom inter quant matrix" "")
                        (dump-matrix vid 1 0 8) )
        else    (dump-field "Quant type" "H.263") ))

(defnet dump-bitstream-vid-mpeg4-avc (vid)
        (deflocal i j k l)

        (for i in 1 .. (vid-sps-cnt vid) do
                (dump-field "SPS id" (vid-sps-id vid (for-pos)))
                (dump-field (+ (indent) "Profile")
                        (sprint (avc-profile (vid-profile-idc vid (for-pos))) "@L"
                                (/ (vid-level-idc vid (for-pos)) 10) ))
                (dump-field (+ (indent) "Num ref frames") (vid-num-ref-frames vid (for-pos)))
                (set j (vid-par vid (for-pos)))
                (if (and (<> j undef) (> j 0))
                then    (if (= j 255)
                        then    (set k (vid-par-w vid (for-pos)))
                                (set l (vid-par-h vid (for-pos)))
                                (dump-field (+ (indent) "Aspect ratio") (+ "Custom pixel shape" " (" k ":" l " = " (approx (/ k l) <_kv "decimals">) ")"))
                        else    (dump-field (+ (indent) "Aspect ratio") (ar-desc-mpeg4-avc j)) ))
                (set j (vid-chroma-format-idc vid (for-pos)))
                (if (in j 0 .. 3)
                then    (dump-field (+ (indent) "Chroma format") <[ "monochrome" "YUV 4:2:0" "YUV 4:2:2" "YUV 4:4:4" ] j>) )
                (for j in 0 .. 7 do
                        (if (<> (vid-quant-matrix vid j 0 (for-pos)) undef)
                        then    (dump-field
                                        (+ (+ (indent) "Custom ")
                                           <[ "intra4X4 luma" "intra4X4 chromau" "intra4x4 chromav"
                                                    "inter4X4 luma" "inter4X4 chromau" "inter4x4 chromav"
                                                    "intra8X8 luma" "inter8X8 luma" ]  j>)
                                        "" )
                                (dump-matrix vid j (for-pos) (if (< j 6) 4 8)) )))

        (for i in 1 .. (vid-pps-cnt vid) do
                (dump-field "PPS id" (sprint (vid-pps-id vid (for-pos))
                                        " (SPS: " (vid-pps-sps-id vid (for-pos)) ")" ))
                (dump-field (+ (indent) $"Entropy coding type")
                        (if (vid-entropy-coding-mode vid (for-pos))
                                "CABAC"
                                "CAVLC" ))
                (dump-field (+ (indent) "Weighted prediction")
                        (if (vid-weighted-pred vid (for-pos))
                                "P slices - explicit weighted prediction"
                                "No" ))
                (set j (vid-weighted-bipred-idc vid (for-pos)))
                (dump-field (+ (indent) "Weighted bipred idc") <[
                        "No"
                        "B slices - explicit weighted prediction"
                        "B slices - implicit weighted prediction" ]  j>)
                (dump-boolean (+ (indent) "8x8dct") (vid-transform_8x8_mode_flag vid (for-pos)))
                (for j in 12 .. 19 do
                        (if (<> (vid-quant-matrix vid j 0 (for-pos)) undef)
                        then    (dump-field
                                        (+ (+ (indent) "Custom ")
                                           <[ "intra4X4 luma" "intra4X4 chromau" "intra4x4 chromav"
                                                           "inter4X4 luma" "inter4X4 chromau" "inter4x4 chromav"
                                                           "intra8X8 luma" "inter8X8 luma" ]  (- j 12)>)
                                        "" )
                                (dump-matrix vid j (for-pos) (if (< j 17) 4 8)) ))))

(defnet dump-matrix (vid n sps-idx dim)
        (deflocal i j s)

        (for i in 0 .. (- dim 1) do
                (set s "")
                (for j in 0 .. (- dim 1) do
                        (set s (+ s (int->str (vid-quant-matrix vid n (+ (* dim i) j) sps-idx) 4 ' '))) )
                (dump-field "" s) ))

(defnet dump-frame-types (vid)
        (deflocal bs-type tot max i j)

        (set bs-type (vid-bitstream-type vid))
        (set tot (vid-cnt-vop vid))
        (if (> tot 0)
        then    (dump-nl)
                (set max 0)
                (for i in 0 .. 4 do
                        (set max (max max (vid-cnt-qscale-cnt vid i 0 0))) )
                (for i in 0 .. 4 do
                        (dump-percent-line (vid-cnt-qscale-cnt vid i 0 0) tot max j)
                        (dump-field (if (= bs-type 3) (slice-type i) (vop-type i)) j) )))

(defnet dump-bframes (vid)
        (deflocal max tot i j)

        (set max (vid-max-bframes vid))
        (if (> max 0)
        then    (dump-nl)
                (dump-field $"Max consecutive B-VOPs" (sprint
                        max (if (> max 2) " (*)" "") )))
        (if (> max 1)
        then    (set tot 0)
                (set max 0)
                (for i in 1 .. 8 do
                        (set j (vid-cnt-bframes vid i))
                        (set tot (+ tot j))
                        (set max (max max j)) )
                (for i in 1 .. 8 do
                        (set j (vid-cnt-bframes vid i))
                        (if (> j 0)
                        then    (dump-percent-line j tot max j)
                                (dump-field (+ (indentn 2) i " consec") j) ))))

(defnet dump-warp-points (vid)
        (deflocal max tot i j)

        (set max 0)
        (set tot 0)
        (for i in 1 .. 4 do
                (set j (vid-cnt-warp-points-used vid i))
                (set tot (+ tot j))
                (set max (max max j)) )
        (if (> tot 0)
        then    (dump-nl)
                (dump-field $"Used warp points" "")
                (for i in 1 .. 4 do
                        (set j (vid-cnt-warp-points-used vid i))
                        (if (> j 0)
                        then    (dump-percent-line j tot max j)
                                (dump-field (int->str i 5 ' ') j) ))))

(defnet dump-drf (vid fps tosub-a tosub-b)
        (deflocal bs-type types max-qscale
                  n nmax avg dev max
                  type i j )

        (set bs-type (vid-bitstream-type vid))
        (if (= bs-type 3)
        then    (set types 4)
                (set max-qscale 40)
        else    (set types 3)
                (set max-qscale 10) )
        (set n (cnt-qscale-cnt vid types tosub-a tosub-b))
        (if (> n 0)
        then    (set avg (/ (cnt-qscale-avg vid types tosub-a tosub-b) n))
                (set dev (sqrt (- (/ (cnt-qscale-var vid types tosub-a tosub-b) n)
                                  (* avg avg) )))
                (set max (cnt-qscale-max vid types tosub-a tosub-b))

                (dump-section (+ $"DRF analysis"
                        (if (and (= tosub-a 0) (= tosub-b 0)) "" $" (corrected)") ))

                (opt    (or (> tosub-a 0) (> tosub-b 0))
                        (if (> tosub-a 0)
                        then    (set i (/ tosub-a fps))
                                (dump-field $"End of start credits time position" (+
                                        (date-s2hhmmss i) " (" (approx i <_kv "decimals">) " s) - "
                                        $"ignored frames: " tosub-a )))
                        (if (> tosub-b 0)
                        then    (set i (/ (- (length vid) tosub-b) fps))
                                (dump-field $"End credits time position" (+
                                        (date-s2hhmmss i) " (" (approx i <_kv "decimals">) " s) - "
                                        $"ignored frames: " tosub-b )))
                        (dump-nl) )

                (dump-field $"average DRF" (approx avg <_kv "decimals">))
                (dump-field $"standard deviation" (approx dev <_kv "decimals">))
                (dump-field "max DRF" max)

                (dump-nl)

                (set nmax 0)
                (for i in 1 .. max-qscale do
                        (set nmax (max nmax (cnt-qscale vid i types tosub-a tosub-b))) )

                (set i 0)
                (repeat until (> (cnt-qscale vid i types tosub-a tosub-b) 0)
                        until (= i max-qscale)
                        (inc i) )

                (if (> i 0)
                then    (dump-percent-line 0 n nmax j)
                        (dump-field (+ "DRF<" i) j) )

                (repeat until (= i max-qscale)
                        until (> i max)
                        (dump-percent-line (cnt-qscale vid i types tosub-a tosub-b) n nmax j)
                        (dump-field (if (= i 0) "DRF<1" (+ "DRF=" i)) j)
                        (inc i) )

                (dump-percent-line (cnt-qscale vid i types tosub-a tosub-b) n nmax j)
                (dump-field (+ "DRF>" (- i 1)) j)

                (for type in 0 .. types do
                        (set n (vid-cnt-qscale-cnt vid type tosub-a tosub-b))
                        (if (> n 0)
                        then    (set max (vid-cnt-qscale-max vid type tosub-a tosub-b))
                                (set avg (/ (vid-cnt-qscale-avg vid type tosub-a tosub-b) n))
                                (set dev (sqrt (- (/ (vid-cnt-qscale-var vid type tosub-a tosub-b) n) (* avg avg))))

                                (dump-nl)
                                (set i (if (= bs-type 3) (slice-type type) (vop-type type)))
                                (dump-field (+ i $" average DRF") (approx avg <_kv "decimals">))
                                (dump-field (+ i $" std. deviation") (approx dev <_kv "decimals">))
                                (dump-field (+ i " max DRF") max) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-profile-compliancy ()
        (opt (dump-profile-compliancy-low)) )

(defnet dump-profile-compliancy-low ()
        (deflocal default-info profile w h fps vid i
                  vbv-size vbv-init vbv-fill vbv-min-fill r0 size
                  max-underflows underflows )

        (set default-info <_kv "default">)
        (= (cfg-get-or-default "enabled-profile-compliancy" default-info) true)
        (for i in 1 .. <_kv "video"> do
                (opt (info->vid-fps-res-low (for-pos) vid fps w h))
                until (vidp vid) )
        (integerp w)
        (integerp h)

        (dump-section $"Profile compliancy")

        (set profile <(cfg-get "profiles") (cfg-get-or-default-num "profile" default-info)>)
        (dump-field $"Selected profile" <profile 0>)

        (dump-field $"Resolution"
                (if (and (or (= <profile 1> 0) (<= w <profile 1>))
                         (or (= <profile 2> 0) (<= h <profile 2>)) )
                        "Ok"
                        (sprint w " x " h " > "
                                <profile 1> " x " <profile 2> )))

        (dump-field "Framerate"
                (if (or (= <profile 3> 0)
                        (<= (abs (- <profile 3> fps))
                            (if (= <profile 3> 25) 0 0.04) ))
                "Ok"
                (sprint (approx fps <_kv "decimals">) " <> " <profile 3>) ))

        (= <_kv "complete"> true)
        (vidp vid)

        (set vbv-size (rint (/ <profile 4> 8)))
        (set vbv-init (rint (/ <profile 5> 8)))
        (set vbv-fill vbv-init)
        (set vbv-min-fill (maxint))
        (set r0 (rint (/ <profile 6> fps 8)))
        (set max-underflows 20)
        (set underflows 0)
        (for i in 0 .. (- (cnt-qscale-cnt vid 5 0 0) 1) do
                (set size (vid-cnt-size-frame vid i))
                (set vbv-fill (+ vbv-fill r0))
                (if (< vbv-fill size)
                then    (dump-field "Buffer underflow" (sprint
                                                (date-s2hhmmss (/ i fps)) " (frame " i ")" ))
                        (set vbv-fill vbv-init)
                        (set underflows (+ underflows 1))
                        (if (= underflows max-underflows)
                        then    (dump-field $"Error" $"Too many violations") )
                else    (set vbv-fill (min vbv-size (- vbv-fill size)))
                        (set vbv-min-fill (min vbv-min-fill vbv-fill)) )
                until (= underflows max-underflows) )
        (if (= underflows 0)
        then    (dump-field $"Min buffer fill"
                (sprint (rint (/ vbv-min-fill vbv-size 0.01)) "%") )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-mkv-content-encodings (track)
        (deflocal a asc i j k)

        (set a <track "ContentEncodings">)
        (if (> (length a) 0)
        then    (for i in a do
                        (set asc (cdr i))
                        (dump-field (+ "Content encoding"
                                            (if (= (length a) 1) ""
                                                (+ " nr. " (+ (for-pos) 1)) )) "" )
                        (dump-field (+ (indent) "order") (car i))
                        (set j <asc "ContentEncodingScope">)
                        (set k (queue))
                        (if (= (flags-field j 0 1) 1)
                        then    (queue-put k "all frames") )
                        (if (= (flags-field j 1 1) 1)
                        then    (queue-put k "codec private") )
                        (if (= (flags-field j 2 1) 1)
                        then    (queue-put k "next content encoding") )
                        (dump-field (+ (indent) "scope") (sprintl k " + "))
                        (set j <asc "ContentEncodingType">)
                        (dump-field (+ (indent) "type") <[ "compression" "encryption" ] j>)
                        (if (= j 0)
                        then    (set j <asc "ContentCompAlgo">)
                                (dump-field (+ (indent) "compression algorithm") <[ "zlib" "bzlib" "lzo1x" "header stripping" ] j>)
                                (if (= j 3)
                                then    (set j <asc "ContentCompSettings">)
                                        (if (rawp j)
                                        then    (dump-bytes (+ (indent) "stripped header") (length j)) ))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-mkv-attachments ()
        (deflocal q a i)

        (if (and (= <_kv "filetype"> "mkv")
                 (cfg-get-or-df "enabled-attachments") )
        then    (set q <_kv "fileinfo" "Attachments">)
                (for a in q do
                        (dump-section (+ $"Attached file"
                                (if (= (length q) 1) "" (+ $" nr. " (+ (for-pos) 1))) ))
                        (set i <a "FileDescription">)
                        (if (<> i undef)
                        then    (dump-field $"Description" i) )
                        (set i <a "FileName">)
                        (if (<> i undef)
                        then    (dump-field $"File name" i) )
                        (set i <a "FileMimeType">)
                        (if (<> i undef)
                        then    (dump-field "MIME type" i) )
                        (dump-bytes $"Size" (cdr <a "FileData">))
                        (set i <a "FileUID">)
                        (if (<> i undef)
                        then    (dump-field "UID" i) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-mkv-chapters ()
        (deflocal q a i)

        (if (and (= <_kv "filetype"> "mkv")
                 (cfg-get-or-df "enabled-chapters") )
        then    (set q <_kv "fileinfo" "Editions">)
                (for a in q do
                        (dump-section (+ "Edition entry"
                                (if (= (length q) 1) "" (+ " nr. " (+ (for-pos) 1))) ))
                        (set i <(cdr a) "EditionUID">)
                        (if (<> i undef)
                        then    (dump-field "UID" i) )
                        (dump-boolean $"Hidden" <(cdr a) "EditionFlagHidden">)
                        (dump-boolean $"Selected by default" <(cdr a) "EditionFlagDefault">)
                        (dump-boolean "Playlist" <(cdr a) "EditionFlagOrdered">)
                        (dump-field $"Chapters" "")
                        (dump-mkv-chapters-rec (car a)
                                (cfg-get-or-df "chapter-display-grouped")
                                0 ))))

(defnet dump-mkv-chapters-rec (a chap-disp-grouped level)
        (deflocal i j displays s c)

        (for i in a do
                (set displays <(cdr i) "displays">)
                (if (= (length displays) 0)
                then    (dump-field
                                (+ (indentn level) (s->hhmmss (car i)) "-"
                                   (s->hhmmss <(cdr i) "ChapterTimeEnd">) )
                                (+ (indentn level) $"Chapter nr. " (+ (for-pos) 1)) )
                else    (for j in displays do
                                (set s <j "ChapString">)
                                (set c <j "ChapCountry">)
                                (if (= s undef)
                                then    (set s (+ $"Chapter nr. " (+ (for-pos) 1))) )
                                (dump-field
                                        (if (and chap-disp-grouped (> (for-pos) 0)) ""
                                                (+ (indentn level) (s->hhmmss (car i)) "-"
                                                   (s->hhmmss <(cdr i) "ChapterTimeEnd">) ))
                                        (+ (indentn level) s " {" <j "ChapLanguage"> "}"
                                           (if (= c undef) "" (+ " [" c "]")) ))))
                (set j <(cdr i) "ChapterAtom">)
                (if (<> j undef)
                then    (dump-mkv-chapters-rec j chap-disp-grouped (+ level 1)) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dump-iup-begin ()
        (deflocal a)

        (set a (array 2))
        (set <a 0> "")
        (set <a 1> (queue))
        (set <_kv "dump-iup"> a) )

(defnet dump-iup-end ()
        (deflocal text a q c i p)

        (set text <_kv "text">)
        (set a <_kv "dump-iup">)
        (set q <a 1>)
        (iup-set-str-attribute text "VALUE" <a 0>)
        (set p 0)
        (while (> (length q) 0) do
                (set a (queue-get q))
                (set c (cdr a))
                (set a (+ p (car a)))
                (if (= c "inverse-background")
                then    (set c (cfg-get-or-df "color-background"))
                        (set c (pix-color (- 0xff (pix-color-red c))
                                          (- 0xff (pix-color-green c))
                                          (- 0xff (pix-color-blue c)) ))
                else    (set c <_kv c>) )
                (set i (iup-user))
                (iup-set-str-attribute i "SELECTIONPOS" p ":" a)
                (iup-set-str-attribute i "FGCOLOR" (sprint (pix-color-red c) " " (pix-color-green c) " " (pix-color-blue c)))
                (iup-set-attribute text "ADDFORMATTAG_HANDLE" i)
                (set p a) )
        (iup-set-int text "CARETPOS" 0)
        (iup-refresh text)
        (assoc-clr _kv "dump-iup") )

(defnet dump-iup-append (color msg)
        (deflocal a)

        (set msg (utf8-validate0 msg))
        (set a <_kv "dump-iup">)
        (inc <a 0> msg)
        (queue-put <a 1> (cons (utf8-length msg) color)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

