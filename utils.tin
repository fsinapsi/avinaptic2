;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun url-home-page () "http://fsinapsi.altervista.org")

(defun compile-time () (date (date-year (cdate)) (date-month (cdate)) (date-day (cdate))))

(defun date->version (date)
        (+ (int->str (date-day date) 2 '0') "-"
           (int->str (date-month date) 2 '0') "-"
           (int->str (date-year date) 4 '0') ))

(defun remote-version-key () "avinaptic-win64-20")

(defun remote-version () net remote-version)
(defnet remote-version (@s)
        (deflocal i)

        (set @s (download-as-string (+ (url-home-page) "/code/avinaptic/index.html")))
        (stringp @s)
        (search (remote-version-key) @s i)
        (set @s (str->date (sub (+ i (- (length (remote-version-key)) 2)) 8 @s)))
        (datep @s) )

(defun remote-version-cached () net remote-version-cached)
(defnet remote-version-cached (@s)
        (deflocal now s)

        (set now (now))
        (set @s (cfg-get "last-check-for-updates-version"))
        (set s (- now (cfg-get "last-check-for-updates")))
        (if (or (= @s undef) (= s undef) (> s (* 60 60 12)))
        then    (set @s (remote-version))
                (if (= @s undef)
                then    (set @s (compile-time)) )
                (cfg-set "last-check-for-updates-version" @s)
                (cfg-set "last-check-for-updates" now) ))

(defun gc-version () (gc-version0 (gc-version-major) (gc-version-minor)))
(defun gc-version0 (maj min)
        (if (or (= maj undef) (= min undef))
                "< 7.1"
                (sprint maj '.' min) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun parse-video-frame-min () 20)
(defun check-for-updates-delay () (* 60 60 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dec-size (@size n)
        (>= @size n)
        (set @size (- @size n)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun flags-field (flags pos n)
        (% (div flags (pow 2 pos)) (pow 2 n)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet assoc-queue (a k v)
        (deflocal q)

        (set q <a k>)
        (if (= q undef)
        then    (set q (queue))
                (set <a k> q) )
        (queue-put q v) )

(defnet assoc-queue-unique (a k v)
        (deflocal q)

        (set q <a k>)
        (if (= q undef)
        then    (set q (queue))
                (set <a k> q) )
        (if (not (in v q))
        then    (queue-put q v) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun log10 (n)
        (if (< n 10) 0 (+ 1 (log10 (div (floor n) 10)))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun format-int (n)
        (if (< n 1000) (sprint n)
                (+ (format-int (div n 1000)) ","
                   (int->str (% n 1000) 3 "0") )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun format-date (d)
        (sprint (date-day d) '-' (int->str (date-month d) 2 '0') '-'
                (int->str (date-year d) 2 '0') ' '
                (int->str (date-hours d) 2 '0') ':'
                (int->str (date-minutes d) 2 '0') ':'
                (int->str (date-seconds d) 2 '0') ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun s->hhmmss (s) (s->hhmmss0 (approx3 s)))
(defun s->hhmmss0 (s)
        (+ (date-s2hhmmss (floor s)) ","
           (int->str (* (- s (floor s)) 1000) 3 '0') ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun color2hex (color)
        (sprint "#" (hexdigit (div (pix-color-red color) 0x10))
                    (hexdigit (pix-color-red color))
                    (hexdigit (div (pix-color-green color) 0x10))
                    (hexdigit (pix-color-green color))
                    (hexdigit (div (pix-color-blue color) 0x10))
                    (hexdigit (pix-color-blue color)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun avistreamtype2str (type)
        (if (= type "vids") "video"
        (if (= type "auds") "audio"
        (if (= type "txts") $"subtitles"
        (if (= type "sdmf") (+ $"subtitles" " (DivX Media Format)")
                            (+ "??? (" type ")") )))))

(defun audiotag2name (tag)
        (audiotag2name0 tag
              [ [ 0x0001 . "PCM" ]
                [ 0x0002 . "ADPCM" ]
                [ 0x0003 . "IEEE FLOAT" ]
                [ 0x0004 . "VSELP" ]
                [ 0x0005 . "IBM CVSD" ]
                [ 0x0006 . "aLaw" ]
                [ 0x0007 . "MULAW" ]
                [ 0x0008 . "DTS" ]
                [ 0x0009 . "Microsoft DRM" ]
                [ 0x000A . "wma9spdmo" ]
                [ 0x0010 . "OKI ADPCM" ]
                [ 0x0011 . "DVI ADPCM" ]
                [ 0x0012 . "Mediaspace ADPCM" ]
                [ 0x0013 . "Sierra ADPCM" ]
                [ 0x0014 . "G723 ADPCM" ]
                [ 0x0015 . "DIGISTD" ]
                [ 0x0016 . "DIGIFIX" ]
                [ 0x0017 . "Dialogic OKI ADPCM" ]
                [ 0x0018 . "Mediavision ADPCM" ]
                [ 0x0019 . "CU CODEC" ]
                [ 0x0020 . "Yamaha ADPCM" ]
                [ 0x0021 . "Sonarc" ]
                [ 0x0022 . "DSP Group TrueSpeech" ]
                [ 0x0023 . "ECHOSC1" ]
                [ 0x0024 . "Audiofile AF36" ]
                [ 0x0025 . "APTX" ]
                [ 0x0026 . "Audiofile AF10" ]
                [ 0x0027 . "Prosody 1612" ]
                [ 0x0028 . "LRC" ]
                [ 0x0030 . "Dolby AC2" ]
                [ 0x0031 . "GSM610" ]
                [ 0x0032 . "MSN Audio" ]
                [ 0x0033 . "Antex ADPCME" ]
                [ 0x0034 . "Control Res. VQLPC" ]
                [ 0x0035 . "DigiReal" ]
                [ 0x0036 . "DigiADPCM" ]
                [ 0x0037 . "Control Res. CR10" ]
                [ 0x0038 . "NMS VBXADPCM" ]
                [ 0x0039 . "CS IMAADPCM" ]
                [ 0x003A . "ECHOSC3" ]
                [ 0x003B . "Rockwell ADPCM" ]
                [ 0x003C . "Rockwell DIGITALK" ]
                [ 0x003D . "XEBEC" ]
                [ 0x0040 . "G721 ADPCM" ]
                [ 0x0041 . "G728 CELP" ]
                [ 0x0042 . "MSG723" ]
                [ 0x0043 . "IBM AVC ADPCM" ]
                [ 0x0045 . "ITU-T G.726 ADPCM" ]
                [ 0x0050 . "MPEG (MP1/MP2)" ]
                [ 0x0052 . "RT24" ]
                [ 0x0053 . "PAC" ]
                [ 0x0055 . "MP3" ]
                [ 0x0059 . "Lucent G723" ]
                [ 0x0060 . "Cirrus" ]
                [ 0x0061 . "ESPCM" ]
                [ 0x0062 . "Voxware" ]
                [ 0x0063 . "Canopus ATRAC" ]
                [ 0x0064 . "G726 ADPCM" ]
                [ 0x0065 . "G722 ADPCM" ]
                [ 0x0066 . "DSAT" ]
                [ 0x0067 . "DSAT DISPLAY" ]
                [ 0x0069 . "Voxware BYTE ALIGNED" ]
                [ 0x0070 . "Voxware AC8" ]
                [ 0x0071 . "Voxware AC10" ]
                [ 0x0072 . "Voxware AC16" ]
                [ 0x0073 . "Voxware AC20" ]
                [ 0x0074 . "Voxware RT24" ]
                [ 0x0075 . "Voxware RT29" ]
                [ 0x0076 . "Voxware RT29HW" ]
                [ 0x0077 . "Voxware VR12" ]
                [ 0x0078 . "Voxware VR18" ]
                [ 0x0079 . "Voxware TQ40" ]
                [ 0x0080 . "Softsound" ]
                [ 0x0081 . "Voxware TQ60" ]
                [ 0x0082 . "MSRT24" ]
                [ 0x0083 . "G729A" ]
                [ 0x0084 . "MVI MVI2" ]
                [ 0x0085 . "DF G726" ]
                [ 0x0086 . "DF GSM610" ]
                [ 0x0088 . "ISIAUDIO" ]
                [ 0x0089 . "ONLIVE" ]
                [ 0x0091 . "SBC24" ]
                [ 0x0092 . "Dolby AC3 SPDIF" ]
                [ 0x0093 . "MediaSonic G723" ]
                [ 0x0094 . "Prosody 8KBPS" ]
                [ 0x0097 . "Zyxel ADPCM" ]
                [ 0x0098 . "Philips LPCBB" ]
                [ 0x0099 . "PACKED" ]
                [ 0x00A0 . "Malden PhonyTalk" ]
                [ 0x00FF . "AAC" ]
                [ 0x0100 . "Rhetorax ADPCM" ]
                [ 0x0101 . "IRAT" ]
                [ 0x0102 . "ALAW" ]
                [ 0x0103 . "ADPCM" ]
                [ 0x0111 . "Vivo G723" ]
                [ 0x0112 . "Vivo SIREN" ]
                [ 0x0123 . "DEC G723" ]
                [ 0x0125 . "Sanyo LD ADPCM" ]
                [ 0x0130 . "Sipro Lab ACEPLNET" ]
                [ 0x0131 . "Sipro Lab ACELP4800" ]
                [ 0x0132 . "Sipro Lab ACELP8V3" ]
                [ 0x0133 . "Sipro Lab G729" ]
                [ 0x0134 . "Sipro Lab G729A" ]
                [ 0x0135 . "Sipro Lab KELVIN" ]
                [ 0x0140 . "G726ADPCM" ]
                [ 0x0150 . "Qualcomm Purevoice" ]
                [ 0x0151 . "Qualcomm Halfrate" ]
                [ 0x0155 . "TUBGSM" ]
                [ 0x0160 . "DivX audio v1 (WMA v1)" ]
                [ 0x0161 . "DivX audio v2 (WMA v2)" ]
                [ 0x0162 . "Windows Media Audio 9 Professional" ]
                [ 0x0163 . "Windows Media Audio 9 Lossless" ]
                [ 0x0170 . "UNISYS NAP ADPCM" ]
                [ 0x0171 . "UNISYS NAP ULAW" ]
                [ 0x0172 . "UNISYS NAP ALAW" ]
                [ 0x0173 . "UNISYS NAP 16K" ]
                [ 0x0200 . "Creative ADPCM" ]
                [ 0x0202 . "Creative FASTSPEECH8" ]
                [ 0x0203 . "Creative FASTSPEECH10" ]
                [ 0x0210 . "UHER ADPCM" ]
                [ 0x0215 . "Ulead DV ACM" ]
                [ 0x0216 . "Ulead DV ACM" ]
                [ 0x0220 . "Quarterdeck" ]
                [ 0x0230 . "I-Link VC" ]
                [ 0x0240 . "RAW SPORT" ]
                [ 0x0241 . "ESST AC3" ]
                [ 0x0250 . "IPI HSX" ]
                [ 0x0251 . "IPI RPELP" ]
                [ 0x0260 . "CS2" ]
                [ 0x0270 . "Sony SCX" ]
                [ 0x0300 . "FM TOWNS SND" ]
                [ 0x0400 . "BTV DIGITAL" ]
                [ 0x0401 . "Intel Music Coder (IMC)" ]
                [ 0x0402 . "Ligos Indeo Audio" ]
                [ 0x0450 . "QDesign MUSIC" ]
                [ 0x0680 . "VME VMPCM" ]
                [ 0x0681 . "TPC" ]
                [ 0x0700 . "YMPEG Alpha (dummy for MPEG-2 compressor)" ]
                [ 0x08AE . "Lightwave Lossless" ]
                [ 0x1000 . "OLIGSM" ]
                [ 0x1001 . "OLIADPCM" ]
                [ 0x1002 . "OLICELP" ]
                [ 0x1003 . "OLISBC" ]
                [ 0x1004 . "OLIOPR" ]
                [ 0x1100 . "LH CODEC" ]
                [ 0x1101 . "L & H CELP codec" ]
                [ 0x1102 . "L & H SBC codec" ]
                [ 0x1103 . "L & H SBC codec" ]
                [ 0x1104 . "L & H SBC codec" ]
                [ 0x1400 . "NORRIS" ]
                [ 0x1401 . "ISIAUDIO" ]
                [ 0x1500 . "Soundspace Musicompress" ]
                [ 0x181C . "VoxWare RT24 speech codec" ]
                [ 0x181E . "Lucent elemedia AX24000P Music codec" ]
                [ 0x1C07 . "Lucent SX8300P speech codec" ]
                [ 0x1C0C . "Lucent SX5363S G.723 compliant codec" ]
                [ 0x1F03 . "CUseeMe DigiTalk (ex-Rocwell)" ]
                [ 0x1FC4 . "NCT ALF2CD codec" ]
                [ 0x2000 . "AC3" ]
                [ 0x2001 . "DTS" ]
                [ 0x2002 . "RealAudio 1 / 2 14.4" ]
                [ 0x2003 . "RealAudio 1 / 2 28.8" ]
                [ 0x2004 . "RealAudio G2 / 8 Cook (low bitrate)" ]
                [ 0x2005 . "RealAudio 3 / 4 / 5 Music (DNET)" ]
                [ 0x2006 . "RealAudio 10 AAC (RAAC)" ]
                [ 0x2007 . "RealAudio 10 AAC+ (RACP)" ]
                [ 0x3313 . "makeAVIS (ffvfw fake AVI sound from AviSynth scripts)" ]
                [ 0x4143 . "Divio MPEG-4 AAC audio" ]
                [ 0x434C . "LEAD Speech" ]
                [ 0x564C . "LEAD Vorbis" ]
                [ 0x674f . "Ogg Vorbis 1" ]
                [ 0x6750 . "Ogg Vorbis 2" ]
                [ 0x6751 . "Ogg Vorbis 3" ]
                [ 0x676f . "Ogg Vorbis 1 PLUS" ]
                [ 0x6770 . "Ogg Vorbis 2 PLUS" ]
                [ 0x6771 . "Ogg Vorbis 3 PLUS" ]
                [ 0x7A21 . "GSM-AMR (CBR, no SID)" ]
                [ 0x7A22 . "GSM-AMR (VBR, including SID)" ]
                [ 0xDFAC . "DebugMode SonicFoundry Vegas FrameServer ACM Codec" ]
                [ 0xF1AC . "Free Lossless Audio Codec FLAC" ]
                [ 0xFFFE . "Extensible wave format" ]
                [ 0xFFFF . "development use" ] ] ))
(defun audiotag2name0 (tag l)
        (if (= l nil) "???"
                (if (= tag (car (car l))) (cdr (car l))
                        (audiotag2name0 tag (cdr l)) )))

(defun ar-desc-mpeg4-asp (ar)
        <[ "Unspecified"
                "Square pixels"
                "12:11 (4:3 PAL pixel shape)"
                "10:11 (4:3 NTSC pixel shape)"
                "16:11 (16:9 PAL pixel shape)"
                "40:33 (16:9 NTSC pixel shape)"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Invalid aspect_ratio setting"
                "Custom pixel shape" ] ar >)

(defun ar-desc-mpeg4-avc (ar) (ar-desc-mpeg4-avc0 (ar-desc-mpeg4-avc1 ar)))
(defun ar-desc-mpeg4-avc0 (s) (if (= s undef) "Invalid aspect_ratio setting" s))
(defun ar-desc-mpeg4-avc1 (ar)
        <[ "Unspecified"
                "Square pixels"
                "12:11 (4:3 PAL pixel shape)"
                "10:11 (4:3 NTSC pixel shape)"
                "16:11 (16:9 PAL pixel shape)"
                "40:33 (16:9 NTSC pixel shape)"
                "24:11"
                "20:11"
                "32:11"
                "80:33"
                "18:11"
                "15:11"
                "64:33"
                "160:99"
                "4:3"
                "3:2"
                "2:1" ] ar >)

(defun vop-type-list ()
        [ "I-VOPs" "P-VOPs" "B-VOPs" "S-VOPs" "N-VOPs" ] )

(defun vop-type (type)
        <(vop-type-list) type> )

(defun vop-type-short ()
        [ "I" "P" "B" "S" "N" ] )

(defun slice-type-list ()
        [ "P-slices" "B-slices" "I-slices" "SP-slices" "SI-slices" ] )

(defun slice-type (type)
        <(slice-type-list) type> )

(defun slice-type-short ()
        [ "P" "B" "I" "SP" "SI" ] )

(defun avc-profile (code) (avc-profile0 code (avc-profiles)))
(defun avc-profile0 (code l)
        (if (= l nil) undef
                (if (= (car (car l)) code) (cdr (car l))
                        (avc-profile0 code (cdr l)) )))

(defun avc-profiles ()
        [ [  66 . "Baseline" ]
          [  77 . "Main" ]
          [  88 . "Extended" ]
          [ 100 . "High" ]
          [ 110 . "High 10" ]
          [ 122 . "High 4:2:2" ]
          [ 144 . "High 4:4:4" ] ] )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet iup-message-info (parent msg)
        (if (cli)
        then    (print "INF: " msg nl)
        else    (sound-info)
                (iup-info60 parent msg) ))

(defnet iup-message-warning (parent msg)
        (if (cli)
        then    (print "WRN: " msg nl)
        else    (sound-warning)
                (iup-warning60 parent msg) ))

(defnet iup-message-error (parent msg)
        (if (cli)
        then    (print "ERR: " msg nl)
        else    (sound-error)
                (iup-error60 parent msg) ))

(defnet iup-message-confirm (parent msg)
        (if (not (cli))
        then    (sound-question)
                (iup-confirm60 parent msg) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun info->vid (n) net info->vid)
(defnet info->vid (n @vid)
        (deflocal fps)
        (info->vid-fps n @vid fps) )

(defnet info->vid-fps (n @vid @fps)
        (= <_kv "complete"> true)
        (info->vid-fps-low n @vid @fps) )

(defnet info->vid-fps-low (n @vid @fps)
        (deflocal w h)
        (info->vid-fps-res-low n @vid @fps w h) )

(defnet info->vid-fps-res-low (n @vid @fps @w @h)
        (deflocal fileinfo i)

        (clr @vid @fps)
        (set fileinfo <_kv "fileinfo">)
        (case <_kv "filetype"> of
                "avi"   (seq    (for i in <(car fileinfo) "streams"> do
                                        (if (= <i 0> "vids")
                                        then    (dec n) )
                                        until (= n -1) )
                                (set @vid <i 2>)
                                (set i (car fileinfo))
                                (set @fps <i "fps1">)
                                (set @w <i "width">)
                                (set @h <i "height">) )
                "mkv"   (seq    (for i in <fileinfo "tracks-array"> do
                                        (if (= <(cdr i) "TrackType"> "video")
                                        then    (dec n) )
                                        until (= n -1) )
                                (set i (cdr i))
                                (set @vid <i "low" 0>)
                                (set @fps <i "Framerate">)
                                (set @w <i "PixelWidth">)
                                (set @h <i "PixelHeight">) )
                "mp4"   (seq    (for i in <fileinfo "tracks"> do
                                        (if (= <i "type"> "vide")
                                        then    (dec n) )
                                        until (= n -1) )
                                (set @vid <i "low">)
                                (set @fps <i "framerate">)
                                (set @w <i "width">)
                                (set @h <i "height">) )
                "flv"   (seq    (= n 0)
                                (set @vid <fileinfo "vid">)
                                (set @fps <fileinfo "framerate">)
                                (set @w <fileinfo "width">)
                                (set @h <fileinfo "height">) ))
        (<> (vid-bitstream-type @vid) undef)
        (> (length @vid) 0)
        (if (= @fps undef)
        then    (set @fps 25) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet avcp () (truep (avcp)))
(defun avcp () net avcp0)
(defnet avcp0 (@res)
        (deflocal video vid fps i)

        (alt    (seq    (set video <_kv "video">)
                        (integerp video)
                        (for i in 1 .. video do
                                (opt    (info->vid-fps-low (for-pos) vid fps)
                                        (set @res (= (vid-bitstream-type vid) 3)) )
                                until @res ))
                (set @res false) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun info->aud (n) net info->aud)
(defnet info->aud (n @aud)
        (deflocal fileinfo i)

        (clr @aud)
        (set fileinfo <_kv "fileinfo">)
        (case <_kv "filetype"> of
                "aud"   (seq    (= n 0)
                                (set @aud fileinfo) )
                "avi"   (seq    (for i in <(car fileinfo) "streams"> do
                                        (if (= <i 0> "auds")
                                        then    (inc n -1) )
                                        until (= n -1) )
                                (set @aud <i 2>) )
                "mkv"   (seq    (for i in <fileinfo "tracks-array"> do
                                        (if (= <(cdr i) "TrackType"> "audio")
                                        then    (dec n) )
                                        until (= n -1) )
                                (set @aud <(cdr i) "low" 0>) )
                "mp4"   (seq    (for i in <fileinfo "tracks"> do
                                        (if (= <i "type"> "soun")
                                        then    (dec n) )
                                        until (= n -1) )
                                (set @aud <i "low">) )
                "flv"   (seq    (= n 0)
                                (set @aud <fileinfo "aud">) ))
        (audp @aud) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun info->aud-queue () net info->aud-queue)
(defnet info->aud-queue (@q)
        (deflocal i aud codec)

        (set @q (queue))
        (set i <_kv "audio">)
        (for i in 1 .. (if (integerp i) i 0) do
                (set aud (info->aud (for-pos)))
                (set codec (aud-codec aud))
                (if (<> codec undef)
                then    (queue-put @q (list i aud codec)) )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun x265-user-data (path) net x265-user-data)
(defnet x265-user-data (path @s)
        (deflocal f raw l s)

        (set f (fopenro path))
        (<> f undef)
        (set raw (raw 65536))
        (set l (raw-read raw f))
        (set s (raw->str raw l))
        (close raw f)
        (search-and-cut "x265" s l)
        (search-and-cut (sprint (int->char 128)) s l)
        (for f in l do
                (in f (int->char 32) .. (int->char 127)) )
        (set @s (+ "x265" l)) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet da-chiudere (obj)
        (queue-put <_kv "da-chiudere"> obj) )

(defnet quit ()
        (deflocal obj)

        (for obj in <_kv "da-chiudere"> do
                (close obj) )
        (sound-quit) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

